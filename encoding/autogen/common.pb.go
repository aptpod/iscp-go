// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: common.proto

package iscp2

import (
	bytes "bytes"
	io "io"
	math "math"
	math_bits "math/bits"

	"github.com/aptpod/iscp-go/errors"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = errors.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QoS int32

const (
	QoS_UNRELIABLE QoS = 0
	QoS_RELIABLE   QoS = 1
	QoS_PARTIAL    QoS = 2
)

var QoS_name = map[int32]string{
	0: "UNRELIABLE",
	1: "RELIABLE",
	2: "PARTIAL",
}

var QoS_value = map[string]int32{
	"UNRELIABLE": 0,
	"RELIABLE":   1,
	"PARTIAL":    2,
}

func (x QoS) String() string {
	return proto.EnumName(QoS_name, int32(x))
}

func (QoS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}

type StreamChunk struct {
	SequenceNumber       uint32            `protobuf:"varint,1,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number,omitempty"`
	DataPointGroups      []*DataPointGroup `protobuf:"bytes,2,rep,name=data_point_groups,json=dataPointGroups,proto3" json:"data_point_groups,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *StreamChunk) Reset()         { *m = StreamChunk{} }
func (m *StreamChunk) String() string { return proto.CompactTextString(m) }
func (*StreamChunk) ProtoMessage()    {}
func (*StreamChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{0}
}
func (m *StreamChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamChunk.Merge(m, src)
}
func (m *StreamChunk) XXX_Size() int {
	return m.Size()
}
func (m *StreamChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamChunk.DiscardUnknown(m)
}

var xxx_messageInfo_StreamChunk proto.InternalMessageInfo

type DataPointGroup struct {
	// Types that are valid to be assigned to DataIdOrAlias:
	//	*DataPointGroup_DataId
	//	*DataPointGroup_DataIdAlias
	DataIdOrAlias        isDataPointGroup_DataIdOrAlias `protobuf_oneof:"data_id_or_alias"`
	DataPoints           []*DataPoint                   `protobuf:"bytes,3,rep,name=data_points,json=dataPoints,proto3" json:"data_points,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                       `json:"-"`
	XXX_unrecognized     []byte                         `json:"-"`
	XXX_sizecache        int32                          `json:"-"`
}

func (m *DataPointGroup) Reset()         { *m = DataPointGroup{} }
func (m *DataPointGroup) String() string { return proto.CompactTextString(m) }
func (*DataPointGroup) ProtoMessage()    {}
func (*DataPointGroup) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{1}
}
func (m *DataPointGroup) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataPointGroup) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataPointGroup.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataPointGroup) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataPointGroup.Merge(m, src)
}
func (m *DataPointGroup) XXX_Size() int {
	return m.Size()
}
func (m *DataPointGroup) XXX_DiscardUnknown() {
	xxx_messageInfo_DataPointGroup.DiscardUnknown(m)
}

var xxx_messageInfo_DataPointGroup proto.InternalMessageInfo

type isDataPointGroup_DataIdOrAlias interface {
	isDataPointGroup_DataIdOrAlias()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DataPointGroup_DataId struct {
	DataId *DataID `protobuf:"bytes,1,opt,name=data_id,json=dataId,proto3,oneof" json:"data_id,omitempty"`
}
type DataPointGroup_DataIdAlias struct {
	DataIdAlias uint32 `protobuf:"varint,2,opt,name=data_id_alias,json=dataIdAlias,proto3,oneof" json:"data_id_alias,omitempty"`
}

func (*DataPointGroup_DataId) isDataPointGroup_DataIdOrAlias()      {}
func (*DataPointGroup_DataIdAlias) isDataPointGroup_DataIdOrAlias() {}

func (m *DataPointGroup) GetDataIdOrAlias() isDataPointGroup_DataIdOrAlias {
	if m != nil {
		return m.DataIdOrAlias
	}
	return nil
}

func (m *DataPointGroup) GetDataId() *DataID {
	if x, ok := m.GetDataIdOrAlias().(*DataPointGroup_DataId); ok {
		return x.DataId
	}
	return nil
}

func (m *DataPointGroup) GetDataIdAlias() uint32 {
	if x, ok := m.GetDataIdOrAlias().(*DataPointGroup_DataIdAlias); ok {
		return x.DataIdAlias
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DataPointGroup) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DataPointGroup_DataId)(nil),
		(*DataPointGroup_DataIdAlias)(nil),
	}
}

type DataPoint struct {
	ElapsedTime          int64    `protobuf:"zigzag64,1,opt,name=elapsed_time,json=elapsedTime,proto3" json:"elapsed_time,omitempty"`
	Payload              []byte   `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataPoint) Reset()         { *m = DataPoint{} }
func (m *DataPoint) String() string { return proto.CompactTextString(m) }
func (*DataPoint) ProtoMessage()    {}
func (*DataPoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{2}
}
func (m *DataPoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataPoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataPoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataPoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataPoint.Merge(m, src)
}
func (m *DataPoint) XXX_Size() int {
	return m.Size()
}
func (m *DataPoint) XXX_DiscardUnknown() {
	xxx_messageInfo_DataPoint.DiscardUnknown(m)
}

var xxx_messageInfo_DataPoint proto.InternalMessageInfo

type DataID struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataID) Reset()         { *m = DataID{} }
func (m *DataID) String() string { return proto.CompactTextString(m) }
func (*DataID) ProtoMessage()    {}
func (*DataID) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{3}
}
func (m *DataID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataID.Merge(m, src)
}
func (m *DataID) XXX_Size() int {
	return m.Size()
}
func (m *DataID) XXX_DiscardUnknown() {
	xxx_messageInfo_DataID.DiscardUnknown(m)
}

var xxx_messageInfo_DataID proto.InternalMessageInfo

type DownstreamFilter struct {
	SourceNodeId         string        `protobuf:"bytes,1,opt,name=source_node_id,json=sourceNodeId,proto3" json:"source_node_id,omitempty"`
	DataFilters          []*DataFilter `protobuf:"bytes,2,rep,name=data_filters,json=dataFilters,proto3" json:"data_filters,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *DownstreamFilter) Reset()         { *m = DownstreamFilter{} }
func (m *DownstreamFilter) String() string { return proto.CompactTextString(m) }
func (*DownstreamFilter) ProtoMessage()    {}
func (*DownstreamFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{4}
}
func (m *DownstreamFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamFilter.Merge(m, src)
}
func (m *DownstreamFilter) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamFilter.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamFilter proto.InternalMessageInfo

type DataFilter struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DataFilter) Reset()         { *m = DataFilter{} }
func (m *DataFilter) String() string { return proto.CompactTextString(m) }
func (*DataFilter) ProtoMessage()    {}
func (*DataFilter) Descriptor() ([]byte, []int) {
	return fileDescriptor_555bd8c177793206, []int{5}
}
func (m *DataFilter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataFilter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataFilter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataFilter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataFilter.Merge(m, src)
}
func (m *DataFilter) XXX_Size() int {
	return m.Size()
}
func (m *DataFilter) XXX_DiscardUnknown() {
	xxx_messageInfo_DataFilter.DiscardUnknown(m)
}

var xxx_messageInfo_DataFilter proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("iscp2.QoS", QoS_name, QoS_value)
	proto.RegisterType((*StreamChunk)(nil), "iscp2.StreamChunk")
	proto.RegisterType((*DataPointGroup)(nil), "iscp2.DataPointGroup")
	proto.RegisterType((*DataPoint)(nil), "iscp2.DataPoint")
	proto.RegisterType((*DataID)(nil), "iscp2.DataID")
	proto.RegisterType((*DownstreamFilter)(nil), "iscp2.DownstreamFilter")
	proto.RegisterType((*DataFilter)(nil), "iscp2.DataFilter")
}

func init() { proto.RegisterFile("common.proto", fileDescriptor_555bd8c177793206) }

var fileDescriptor_555bd8c177793206 = []byte{
	// 468 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x52, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xce, 0x36, 0xff, 0x9f, 0x90, 0xb1, 0x93, 0xba, 0x2b, 0x21, 0x45, 0x1c, 0xac, 0x60, 0x55,
	0x22, 0x42, 0x22, 0x2d, 0xa1, 0x2f, 0xe0, 0x90, 0x42, 0x2c, 0x45, 0x51, 0xd9, 0x96, 0xb3, 0xb5,
	0xc9, 0x6e, 0x53, 0x8b, 0xd8, 0x6b, 0xbc, 0x6b, 0xa1, 0x3c, 0x11, 0x3c, 0x02, 0x47, 0x8e, 0x3d,
	0xf2, 0x08, 0xd4, 0x4f, 0xc1, 0x11, 0x79, 0x1c, 0xa7, 0x2d, 0x27, 0x6e, 0xf3, 0x7d, 0xdf, 0xcc,
	0xe7, 0x6f, 0x76, 0x0c, 0xf6, 0x4a, 0xc5, 0xb1, 0x4a, 0x46, 0x69, 0xa6, 0x8c, 0xa2, 0xff, 0x47,
	0x7a, 0x95, 0x8e, 0x9f, 0xbd, 0x5a, 0x47, 0xe6, 0x26, 0x5f, 0x8e, 0x56, 0x2a, 0x3e, 0x59, 0xab,
	0xb5, 0x3a, 0x41, 0x75, 0x99, 0x5f, 0x23, 0x42, 0x80, 0x55, 0x35, 0xe5, 0x6d, 0xc1, 0xba, 0x34,
	0x99, 0xe4, 0xf1, 0xdb, 0x9b, 0x3c, 0xf9, 0x44, 0x5f, 0xc0, 0xa1, 0x96, 0x9f, 0x73, 0x99, 0xac,
	0x64, 0x98, 0xe4, 0xf1, 0x52, 0x66, 0x7d, 0x32, 0x20, 0xc3, 0x2e, 0xeb, 0xd5, 0xf4, 0x02, 0x59,
	0xea, 0xc3, 0x91, 0xe0, 0x86, 0x87, 0xa9, 0x8a, 0x12, 0x13, 0xae, 0x33, 0x95, 0xa7, 0xba, 0x7f,
	0x30, 0x68, 0x0e, 0xad, 0xf1, 0xd3, 0x11, 0x26, 0x19, 0x4d, 0xb9, 0xe1, 0x17, 0xa5, 0xfc, 0xbe,
	0x54, 0xd9, 0xa1, 0x78, 0x84, 0xb5, 0xf7, 0x95, 0x40, 0xef, 0x71, 0x0f, 0x1d, 0x42, 0x1b, 0x5d,
	0x23, 0x81, 0x9f, 0xb5, 0xc6, 0xdd, 0x07, 0x5e, 0xc1, 0x74, 0xd6, 0x60, 0xad, 0x52, 0x0f, 0x04,
	0x3d, 0x86, 0xee, 0xae, 0x33, 0xe4, 0x9b, 0x88, 0x97, 0xdf, 0x26, 0xc3, 0xee, 0xac, 0xc1, 0xac,
	0xaa, 0xc1, 0x2f, 0x49, 0xfa, 0x1a, 0xac, 0xfb, 0x94, 0xba, 0xdf, 0xc4, 0x7c, 0xce, 0xdf, 0xf9,
	0x18, 0xec, 0xa3, 0xe9, 0x09, 0x05, 0xa7, 0x36, 0x56, 0x59, 0xe5, 0xed, 0xcd, 0xa0, 0xb3, 0x6f,
	0xa6, 0xcf, 0xc1, 0x96, 0x1b, 0x9e, 0x6a, 0x29, 0x42, 0x13, 0xc5, 0x12, 0x83, 0x52, 0x66, 0xed,
	0xb8, 0xab, 0x28, 0x96, 0xb4, 0x0f, 0xed, 0x94, 0x6f, 0x37, 0x8a, 0x0b, 0x8c, 0x65, 0xb3, 0x1a,
	0x7a, 0xa7, 0xd0, 0xaa, 0x56, 0xa1, 0x14, 0xfe, 0x4b, 0xf8, 0x6e, 0xbc, 0xc3, 0xb0, 0x2e, 0x39,
	0xb3, 0x4d, 0x25, 0x0e, 0x75, 0x18, 0xd6, 0x5e, 0x02, 0xce, 0x54, 0x7d, 0x49, 0x34, 0x1e, 0xe9,
	0x5d, 0xb4, 0x31, 0x32, 0xa3, 0xc7, 0xd0, 0xd3, 0x2a, 0xcf, 0xca, 0x1b, 0x29, 0x21, 0xeb, 0xd7,
	0xea, 0x30, 0xbb, 0x62, 0x17, 0x4a, 0xc8, 0x40, 0xd0, 0x33, 0xb0, 0x71, 0x93, 0x6b, 0x1c, 0xaa,
	0xaf, 0x73, 0xf4, 0x60, 0xfb, 0xca, 0xae, 0x7a, 0xb2, 0xaa, 0xd6, 0xde, 0x19, 0xc0, 0xbd, 0xf4,
	0xaf, 0x29, 0x5f, 0x9e, 0x42, 0xf3, 0x83, 0xba, 0xa4, 0x3d, 0x80, 0x8f, 0x0b, 0x76, 0x3e, 0x0f,
	0xfc, 0xc9, 0xfc, 0xdc, 0x69, 0x50, 0x1b, 0x9e, 0xec, 0x11, 0xa1, 0x16, 0xb4, 0x2f, 0x7c, 0x76,
	0x15, 0xf8, 0x73, 0xe7, 0x60, 0x32, 0xb8, 0xbd, 0x73, 0x1b, 0xbf, 0xef, 0x5c, 0xf2, 0xad, 0x70,
	0xc9, 0xf7, 0xc2, 0x25, 0x3f, 0x0a, 0x97, 0xdc, 0x16, 0x2e, 0xf9, 0x59, 0xb8, 0xe4, 0x57, 0xe1,
	0x92, 0x65, 0x0b, 0xff, 0xd0, 0x37, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x70, 0x00, 0x61,
	0xe7, 0x02, 0x00, 0x00,
}

func (this *StreamChunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StreamChunk)
	if !ok {
		that2, ok := that.(StreamChunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SequenceNumber != that1.SequenceNumber {
		return false
	}
	if len(this.DataPointGroups) != len(that1.DataPointGroups) {
		return false
	}
	for i := range this.DataPointGroups {
		if !this.DataPointGroups[i].Equal(that1.DataPointGroups[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DataPointGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataPointGroup)
	if !ok {
		that2, ok := that.(DataPointGroup)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if that1.DataIdOrAlias == nil {
		if this.DataIdOrAlias != nil {
			return false
		}
	} else if this.DataIdOrAlias == nil {
		return false
	} else if !this.DataIdOrAlias.Equal(that1.DataIdOrAlias) {
		return false
	}
	if len(this.DataPoints) != len(that1.DataPoints) {
		return false
	}
	for i := range this.DataPoints {
		if !this.DataPoints[i].Equal(that1.DataPoints[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DataPointGroup_DataId) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataPointGroup_DataId)
	if !ok {
		that2, ok := that.(DataPointGroup_DataId)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DataId.Equal(that1.DataId) {
		return false
	}
	return true
}
func (this *DataPointGroup_DataIdAlias) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataPointGroup_DataIdAlias)
	if !ok {
		that2, ok := that.(DataPointGroup_DataIdAlias)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.DataIdAlias != that1.DataIdAlias {
		return false
	}
	return true
}
func (this *DataPoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataPoint)
	if !ok {
		that2, ok := that.(DataPoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ElapsedTime != that1.ElapsedTime {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DataID) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataID)
	if !ok {
		that2, ok := that.(DataID)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DownstreamFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamFilter)
	if !ok {
		that2, ok := that.(DownstreamFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SourceNodeId != that1.SourceNodeId {
		return false
	}
	if len(this.DataFilters) != len(that1.DataFilters) {
		return false
	}
	for i := range this.DataFilters {
		if !this.DataFilters[i].Equal(that1.DataFilters[i]) {
			return false
		}
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DataFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DataFilter)
	if !ok {
		that2, ok := that.(DataFilter)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *StreamChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DataPointGroups) > 0 {
		for iNdEx := len(m.DataPointGroups) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataPointGroups[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.SequenceNumber != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataPointGroup) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataPointGroup) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataPointGroup) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DataPoints) > 0 {
		for iNdEx := len(m.DataPoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataPoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DataIdOrAlias != nil {
		{
			size := m.DataIdOrAlias.Size()
			i -= size
			if _, err := m.DataIdOrAlias.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *DataPointGroup_DataId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataPointGroup_DataId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DataId != nil {
		{
			size, err := m.DataId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCommon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *DataPointGroup_DataIdAlias) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataPointGroup_DataIdAlias) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintCommon(dAtA, i, uint64(m.DataIdAlias))
	i--
	dAtA[i] = 0x10
	return len(dAtA) - i, nil
}
func (m *DataPoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataPoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataPoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if m.ElapsedTime != 0 {
		i = encodeVarintCommon(dAtA, i, uint64((uint64(m.ElapsedTime)<<1)^uint64((m.ElapsedTime>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DataID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.DataFilters) > 0 {
		for iNdEx := len(m.DataFilters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DataFilters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCommon(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SourceNodeId) > 0 {
		i -= len(m.SourceNodeId)
		copy(dAtA[i:], m.SourceNodeId)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.SourceNodeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DataFilter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataFilter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataFilter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedStreamChunk(r randyCommon, easy bool) *StreamChunk {
	this := &StreamChunk{}
	this.SequenceNumber = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.DataPointGroups = make([]*DataPointGroup, v1)
		for i := 0; i < v1; i++ {
			this.DataPointGroups[i] = NewPopulatedDataPointGroup(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCommon(r, 3)
	}
	return this
}

func NewPopulatedDataPointGroup(r randyCommon, easy bool) *DataPointGroup {
	this := &DataPointGroup{}
	oneofNumber_DataIdOrAlias := []int32{1, 2}[r.Intn(2)]
	switch oneofNumber_DataIdOrAlias {
	case 1:
		this.DataIdOrAlias = NewPopulatedDataPointGroup_DataId(r, easy)
	case 2:
		this.DataIdOrAlias = NewPopulatedDataPointGroup_DataIdAlias(r, easy)
	}
	if r.Intn(5) != 0 {
		v2 := r.Intn(5)
		this.DataPoints = make([]*DataPoint, v2)
		for i := 0; i < v2; i++ {
			this.DataPoints[i] = NewPopulatedDataPoint(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCommon(r, 4)
	}
	return this
}

func NewPopulatedDataPointGroup_DataId(r randyCommon, easy bool) *DataPointGroup_DataId {
	this := &DataPointGroup_DataId{}
	this.DataId = NewPopulatedDataID(r, easy)
	return this
}
func NewPopulatedDataPointGroup_DataIdAlias(r randyCommon, easy bool) *DataPointGroup_DataIdAlias {
	this := &DataPointGroup_DataIdAlias{}
	this.DataIdAlias = uint32(r.Uint32())
	return this
}
func NewPopulatedDataPoint(r randyCommon, easy bool) *DataPoint {
	this := &DataPoint{}
	this.ElapsedTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ElapsedTime *= -1
	}
	v3 := r.Intn(100)
	this.Payload = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCommon(r, 3)
	}
	return this
}

func NewPopulatedDataID(r randyCommon, easy bool) *DataID {
	this := &DataID{}
	this.Name = string(randStringCommon(r))
	this.Type = string(randStringCommon(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCommon(r, 3)
	}
	return this
}

func NewPopulatedDownstreamFilter(r randyCommon, easy bool) *DownstreamFilter {
	this := &DownstreamFilter{}
	this.SourceNodeId = string(randStringCommon(r))
	if r.Intn(5) != 0 {
		v4 := r.Intn(5)
		this.DataFilters = make([]*DataFilter, v4)
		for i := 0; i < v4; i++ {
			this.DataFilters[i] = NewPopulatedDataFilter(r, easy)
		}
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCommon(r, 3)
	}
	return this
}

func NewPopulatedDataFilter(r randyCommon, easy bool) *DataFilter {
	this := &DataFilter{}
	this.Name = string(randStringCommon(r))
	this.Type = string(randStringCommon(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedCommon(r, 3)
	}
	return this
}

type randyCommon interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCommon(r randyCommon) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCommon(r randyCommon) string {
	v5 := r.Intn(100)
	tmps := make([]rune, v5)
	for i := 0; i < v5; i++ {
		tmps[i] = randUTF8RuneCommon(r)
	}
	return string(tmps)
}
func randUnrecognizedCommon(r randyCommon, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldCommon(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldCommon(dAtA []byte, r randyCommon, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateCommon(dAtA, uint64(key))
		v6 := r.Int63()
		if r.Intn(2) == 0 {
			v6 *= -1
		}
		dAtA = encodeVarintPopulateCommon(dAtA, uint64(v6))
	case 1:
		dAtA = encodeVarintPopulateCommon(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateCommon(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateCommon(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateCommon(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateCommon(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *StreamChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		n += 1 + sovCommon(uint64(m.SequenceNumber))
	}
	if len(m.DataPointGroups) > 0 {
		for _, e := range m.DataPointGroups {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataPointGroup) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataIdOrAlias != nil {
		n += m.DataIdOrAlias.Size()
	}
	if len(m.DataPoints) > 0 {
		for _, e := range m.DataPoints {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataPointGroup_DataId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DataId != nil {
		l = m.DataId.Size()
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}
func (m *DataPointGroup_DataIdAlias) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovCommon(uint64(m.DataIdAlias))
	return n
}
func (m *DataPoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ElapsedTime != 0 {
		n += 1 + sozCommon(uint64(m.ElapsedTime))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceNodeId)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if len(m.DataFilters) > 0 {
		for _, e := range m.DataFilters {
			l = e.Size()
			n += 1 + l + sovCommon(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataFilter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return errors.Errorf("proto: StreamChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return errors.Errorf("proto: StreamChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return errors.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return errors.Errorf("proto: wrong wireType = %d for field DataPointGroups", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataPointGroups = append(m.DataPointGroups, &DataPointGroup{})
			if err := m.DataPointGroups[len(m.DataPointGroups)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataPointGroup) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return errors.Errorf("proto: DataPointGroup: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return errors.Errorf("proto: DataPointGroup: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return errors.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DataID{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.DataIdOrAlias = &DataPointGroup_DataId{v}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return errors.Errorf("proto: wrong wireType = %d for field DataIdAlias", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DataIdOrAlias = &DataPointGroup_DataIdAlias{v}
		case 3:
			if wireType != 2 {
				return errors.Errorf("proto: wrong wireType = %d for field DataPoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataPoints = append(m.DataPoints, &DataPoint{})
			if err := m.DataPoints[len(m.DataPoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataPoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return errors.Errorf("proto: DataPoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return errors.Errorf("proto: DataPoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return errors.Errorf("proto: wrong wireType = %d for field ElapsedTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.ElapsedTime = int64(v)
		case 2:
			if wireType != 2 {
				return errors.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return errors.Errorf("proto: DataID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return errors.Errorf("proto: DataID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return errors.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return errors.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return errors.Errorf("proto: DownstreamFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return errors.Errorf("proto: DownstreamFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return errors.Errorf("proto: wrong wireType = %d for field SourceNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return errors.Errorf("proto: wrong wireType = %d for field DataFilters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DataFilters = append(m.DataFilters, &DataFilter{})
			if err := m.DataFilters[len(m.DataFilters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataFilter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return errors.Errorf("proto: DataFilter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return errors.Errorf("proto: DataFilter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return errors.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return errors.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, errors.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = errors.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = errors.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = errors.Errorf("proto: unexpected end of group")
)
