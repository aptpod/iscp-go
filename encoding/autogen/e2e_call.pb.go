// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: e2e_call.proto

package iscp2

import (
	bytes "bytes"
	fmt "fmt"
	extensions "github.com/aptpod/iscp-go/encoding/autogen/extensions"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type UpstreamCall struct {
	CallId               string                                  `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	RequestCallId        string                                  `protobuf:"bytes,2,opt,name=request_call_id,json=requestCallId,proto3" json:"request_call_id,omitempty"`
	DestinationNodeId    string                                  `protobuf:"bytes,3,opt,name=destination_node_id,json=destinationNodeId,proto3" json:"destination_node_id,omitempty"`
	Name                 string                                  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string                                  `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Payload              []byte                                  `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	ExtensionFields      *extensions.UpstreamCallExtensionFields `protobuf:"bytes,7,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                `json:"-"`
	XXX_unrecognized     []byte                                  `json:"-"`
	XXX_sizecache        int32                                   `json:"-"`
}

func (m *UpstreamCall) Reset()         { *m = UpstreamCall{} }
func (m *UpstreamCall) String() string { return proto.CompactTextString(m) }
func (*UpstreamCall) ProtoMessage()    {}
func (*UpstreamCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd38e4ee9b6fc196, []int{0}
}
func (m *UpstreamCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamCall.Merge(m, src)
}
func (m *UpstreamCall) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamCall) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamCall.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamCall proto.InternalMessageInfo

type UpstreamCallAck struct {
	CallId               string                                     `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	ResultCode           ResultCode                                 `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3,enum=iscp2.ResultCode" json:"result_code,omitempty"`
	ResultString         string                                     `protobuf:"bytes,3,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields      *extensions.UpstreamCallAckExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *UpstreamCallAck) Reset()         { *m = UpstreamCallAck{} }
func (m *UpstreamCallAck) String() string { return proto.CompactTextString(m) }
func (*UpstreamCallAck) ProtoMessage()    {}
func (*UpstreamCallAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd38e4ee9b6fc196, []int{1}
}
func (m *UpstreamCallAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamCallAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamCallAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamCallAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamCallAck.Merge(m, src)
}
func (m *UpstreamCallAck) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamCallAck) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamCallAck.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamCallAck proto.InternalMessageInfo

type DownstreamCall struct {
	CallId               string                                    `protobuf:"bytes,1,opt,name=call_id,json=callId,proto3" json:"call_id,omitempty"`
	RequestCallId        string                                    `protobuf:"bytes,2,opt,name=request_call_id,json=requestCallId,proto3" json:"request_call_id,omitempty"`
	SourceNodeId         string                                    `protobuf:"bytes,3,opt,name=source_node_id,json=sourceNodeId,proto3" json:"source_node_id,omitempty"`
	Name                 string                                    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Type                 string                                    `protobuf:"bytes,5,opt,name=type,proto3" json:"type,omitempty"`
	Payload              []byte                                    `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`
	ExtensionFields      *extensions.DownstreamCallExtensionFields `protobuf:"bytes,7,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                  `json:"-"`
	XXX_unrecognized     []byte                                    `json:"-"`
	XXX_sizecache        int32                                     `json:"-"`
}

func (m *DownstreamCall) Reset()         { *m = DownstreamCall{} }
func (m *DownstreamCall) String() string { return proto.CompactTextString(m) }
func (*DownstreamCall) ProtoMessage()    {}
func (*DownstreamCall) Descriptor() ([]byte, []int) {
	return fileDescriptor_cd38e4ee9b6fc196, []int{2}
}
func (m *DownstreamCall) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamCall) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamCall.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamCall) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamCall.Merge(m, src)
}
func (m *DownstreamCall) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamCall) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamCall.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamCall proto.InternalMessageInfo

func init() {
	proto.RegisterType((*UpstreamCall)(nil), "iscp2.UpstreamCall")
	proto.RegisterType((*UpstreamCallAck)(nil), "iscp2.UpstreamCallAck")
	proto.RegisterType((*DownstreamCall)(nil), "iscp2.DownstreamCall")
}

func init() { proto.RegisterFile("e2e_call.proto", fileDescriptor_cd38e4ee9b6fc196) }

var fileDescriptor_cd38e4ee9b6fc196 = []byte{
	// 428 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xbf, 0x8e, 0xd3, 0x40,
	0x10, 0xc6, 0xd9, 0x90, 0x4b, 0xc4, 0x9e, 0xcf, 0x21, 0x4b, 0x81, 0x49, 0xb1, 0xb2, 0xc2, 0x81,
	0xd2, 0xe0, 0x48, 0xe6, 0x09, 0x8e, 0x00, 0xd2, 0x15, 0xfc, 0x91, 0x11, 0xb5, 0xe5, 0x78, 0xe7,
	0xcc, 0xea, 0x9c, 0x5d, 0xe3, 0x5d, 0x0b, 0xee, 0x15, 0xa8, 0x78, 0x0c, 0x1e, 0x81, 0x92, 0x32,
	0x25, 0x0d, 0x3d, 0xf1, 0x53, 0x50, 0x22, 0xaf, 0x9d, 0xc8, 0x39, 0x25, 0x4a, 0x93, 0x6e, 0xe6,
	0x9b, 0xdf, 0xd8, 0xfa, 0xbe, 0xd1, 0x62, 0x1b, 0x7c, 0x08, 0xe3, 0x28, 0x4d, 0xbd, 0x2c, 0x97,
	0x5a, 0x92, 0x13, 0xae, 0xe2, 0xcc, 0x1f, 0x0d, 0x73, 0x50, 0x45, 0xaa, 0xc3, 0x58, 0x32, 0xa8,
	0x27, 0xa3, 0x47, 0xf0, 0x55, 0x83, 0x50, 0x5c, 0x0a, 0x35, 0xdd, 0x5e, 0x1a, 0x3d, 0x4b, 0xb8,
	0xfe, 0x54, 0xcc, 0xbd, 0x58, 0x2e, 0xa6, 0x89, 0x4c, 0xe4, 0xd4, 0xc8, 0xf3, 0xe2, 0xca, 0x74,
	0xa6, 0x31, 0x55, 0x8d, 0x8f, 0xbf, 0x77, 0xb0, 0xf5, 0x31, 0x53, 0x3a, 0x87, 0x68, 0x31, 0x8b,
	0xd2, 0x94, 0x3c, 0xc4, 0xfd, 0xea, 0x6b, 0x21, 0x67, 0x0e, 0x72, 0xd1, 0xe4, 0x5e, 0xd0, 0xab,
	0xda, 0x4b, 0x46, 0x9e, 0xe2, 0x41, 0x0e, 0x9f, 0x0b, 0x50, 0x3a, 0x5c, 0x03, 0x1d, 0x03, 0x9c,
	0x35, 0xf2, 0xac, 0xe6, 0x3c, 0xfc, 0x80, 0x81, 0xd2, 0x5c, 0x44, 0x9a, 0x4b, 0x11, 0x0a, 0xc9,
	0xa0, 0x62, 0xef, 0x1a, 0x76, 0xd8, 0x1a, 0xbd, 0x95, 0x0c, 0x2e, 0x19, 0x21, 0xb8, 0x2b, 0xa2,
	0x05, 0x38, 0x5d, 0x03, 0x98, 0xba, 0xd2, 0xf4, 0x4d, 0x06, 0xce, 0x49, 0xad, 0x55, 0x35, 0x71,
	0x70, 0x3f, 0x8b, 0x6e, 0x52, 0x19, 0x31, 0xa7, 0xe7, 0xa2, 0x89, 0x15, 0xac, 0x5b, 0xf2, 0x06,
	0xdf, 0xdf, 0xe4, 0x11, 0x5e, 0x71, 0x48, 0x99, 0x72, 0xfa, 0x2e, 0x9a, 0x9c, 0xfa, 0x63, 0xcf,
	0x44, 0xe8, 0xb5, 0x1d, 0xbe, 0x5a, 0xa3, 0xaf, 0x0d, 0x19, 0x0c, 0x60, 0x5b, 0x18, 0xff, 0x41,
	0x78, 0xd0, 0x5e, 0xb8, 0x88, 0xaf, 0xf7, 0xa7, 0xe2, 0xe3, 0xd3, 0xd6, 0x79, 0x4c, 0x22, 0xb6,
	0x3f, 0x6c, 0x7e, 0x1b, 0x98, 0xc9, 0x4c, 0x32, 0x08, 0x70, 0xbe, 0xa9, 0xc9, 0x63, 0x7c, 0xd6,
	0xec, 0x28, 0x9d, 0x73, 0x91, 0x34, 0xd9, 0x58, 0xb5, 0xf8, 0xc1, 0x68, 0xe4, 0xfd, 0x0e, 0x53,
	0x5d, 0x63, 0xea, 0xc9, 0x0e, 0x53, 0x17, 0xf1, 0xf5, 0x41, 0x5f, 0xdf, 0x3a, 0xd8, 0x7e, 0x29,
	0xbf, 0x88, 0x63, 0x1e, 0xfb, 0x1c, 0xdb, 0x4a, 0x16, 0x79, 0x0c, 0xb7, 0xee, 0x6c, 0xd5, 0xea,
	0xd1, 0x4e, 0xfc, 0x6e, 0xef, 0x89, 0xcf, 0x9b, 0x34, 0xb6, 0x9d, 0x1d, 0x0a, 0xe3, 0x85, 0xbb,
	0x5c, 0xd1, 0x3b, 0xff, 0x56, 0x14, 0xfd, 0x28, 0x29, 0xfa, 0x59, 0x52, 0xf4, 0xab, 0xa4, 0x68,
	0x59, 0x52, 0xf4, 0xbb, 0xa4, 0xe8, 0x6f, 0x49, 0xd1, 0xbc, 0x67, 0x1e, 0xc8, 0xf3, 0xff, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x9f, 0xb4, 0xc5, 0x06, 0x96, 0x03, 0x00, 0x00,
}

func (this *UpstreamCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamCall)
	if !ok {
		that2, ok := that.(UpstreamCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	if this.RequestCallId != that1.RequestCallId {
		return false
	}
	if this.DestinationNodeId != that1.DestinationNodeId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpstreamCallAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamCallAck)
	if !ok {
		that2, ok := that.(UpstreamCallAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	if this.ResultCode != that1.ResultCode {
		return false
	}
	if this.ResultString != that1.ResultString {
		return false
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DownstreamCall) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamCall)
	if !ok {
		that2, ok := that.(DownstreamCall)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CallId != that1.CallId {
		return false
	}
	if this.RequestCallId != that1.RequestCallId {
		return false
	}
	if this.SourceNodeId != that1.SourceNodeId {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Payload, that1.Payload) {
		return false
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *UpstreamCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2ECall(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.DestinationNodeId) > 0 {
		i -= len(m.DestinationNodeId)
		copy(dAtA[i:], m.DestinationNodeId)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.DestinationNodeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RequestCallId) > 0 {
		i -= len(m.RequestCallId)
		copy(dAtA[i:], m.RequestCallId)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.RequestCallId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CallId) > 0 {
		i -= len(m.CallId)
		copy(dAtA[i:], m.CallId)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.CallId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamCallAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamCallAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamCallAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2ECall(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResultCode != 0 {
		i = encodeVarintE2ECall(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.CallId) > 0 {
		i -= len(m.CallId)
		copy(dAtA[i:], m.CallId)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.CallId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamCall) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamCall) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamCall) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintE2ECall(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SourceNodeId) > 0 {
		i -= len(m.SourceNodeId)
		copy(dAtA[i:], m.SourceNodeId)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.SourceNodeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RequestCallId) > 0 {
		i -= len(m.RequestCallId)
		copy(dAtA[i:], m.RequestCallId)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.RequestCallId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CallId) > 0 {
		i -= len(m.CallId)
		copy(dAtA[i:], m.CallId)
		i = encodeVarintE2ECall(dAtA, i, uint64(len(m.CallId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintE2ECall(dAtA []byte, offset int, v uint64) int {
	offset -= sovE2ECall(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedUpstreamCall(r randyE2ECall, easy bool) *UpstreamCall {
	this := &UpstreamCall{}
	this.CallId = string(randStringE2ECall(r))
	this.RequestCallId = string(randStringE2ECall(r))
	this.DestinationNodeId = string(randStringE2ECall(r))
	this.Name = string(randStringE2ECall(r))
	this.Type = string(randStringE2ECall(r))
	v1 := r.Intn(100)
	this.Payload = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedUpstreamCallExtensionFields(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedE2ECall(r, 8)
	}
	return this
}

func NewPopulatedUpstreamCallAck(r randyE2ECall, easy bool) *UpstreamCallAck {
	this := &UpstreamCallAck{}
	this.CallId = string(randStringE2ECall(r))
	this.ResultCode = ResultCode([]int32{0, 0, 1, 2, 3, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 128, 129, 130, 131}[r.Intn(36)])
	this.ResultString = string(randStringE2ECall(r))
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedUpstreamCallAckExtensionFields(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedE2ECall(r, 5)
	}
	return this
}

func NewPopulatedDownstreamCall(r randyE2ECall, easy bool) *DownstreamCall {
	this := &DownstreamCall{}
	this.CallId = string(randStringE2ECall(r))
	this.RequestCallId = string(randStringE2ECall(r))
	this.SourceNodeId = string(randStringE2ECall(r))
	this.Name = string(randStringE2ECall(r))
	this.Type = string(randStringE2ECall(r))
	v2 := r.Intn(100)
	this.Payload = make([]byte, v2)
	for i := 0; i < v2; i++ {
		this.Payload[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedDownstreamCallExtensionFields(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedE2ECall(r, 8)
	}
	return this
}

type randyE2ECall interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneE2ECall(r randyE2ECall) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringE2ECall(r randyE2ECall) string {
	v3 := r.Intn(100)
	tmps := make([]rune, v3)
	for i := 0; i < v3; i++ {
		tmps[i] = randUTF8RuneE2ECall(r)
	}
	return string(tmps)
}
func randUnrecognizedE2ECall(r randyE2ECall, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldE2ECall(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldE2ECall(dAtA []byte, r randyE2ECall, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateE2ECall(dAtA, uint64(key))
		v4 := r.Int63()
		if r.Intn(2) == 0 {
			v4 *= -1
		}
		dAtA = encodeVarintPopulateE2ECall(dAtA, uint64(v4))
	case 1:
		dAtA = encodeVarintPopulateE2ECall(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateE2ECall(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateE2ECall(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateE2ECall(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateE2ECall(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *UpstreamCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallId)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.RequestCallId)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.DestinationNodeId)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovE2ECall(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamCallAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallId)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	if m.ResultCode != 0 {
		n += 1 + sovE2ECall(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovE2ECall(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamCall) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CallId)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.RequestCallId)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.SourceNodeId)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovE2ECall(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovE2ECall(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovE2ECall(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozE2ECall(x uint64) (n int) {
	return sovE2ECall(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UpstreamCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2ECall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCallId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestCallId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamCallExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2ECall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthE2ECall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamCallAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2ECall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamCallAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamCallAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.UpstreamCallAckExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2ECall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthE2ECall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamCall) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowE2ECall
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamCall: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamCall: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CallId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestCallId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestCallId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthE2ECall
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthE2ECall
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DownstreamCallExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipE2ECall(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthE2ECall
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipE2ECall(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowE2ECall
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowE2ECall
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthE2ECall
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupE2ECall
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthE2ECall
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthE2ECall        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowE2ECall          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupE2ECall = fmt.Errorf("proto: unexpected end of group")
)
