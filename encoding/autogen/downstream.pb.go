// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: downstream.proto

package iscp2

import (
	bytes "bytes"
	fmt "fmt"
	extensions "github.com/aptpod/iscp-go/encoding/autogen/extensions"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DownstreamOpenRequest struct {
	RequestId            uint32                                           `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	DesiredStreamIdAlias uint32                                           `protobuf:"varint,2,opt,name=desired_stream_id_alias,json=desiredStreamIdAlias,proto3" json:"desired_stream_id_alias,omitempty"`
	DownstreamFilters    []*DownstreamFilter                              `protobuf:"bytes,3,rep,name=downstream_filters,json=downstreamFilters,proto3" json:"downstream_filters,omitempty"`
	ExpiryInterval       uint32                                           `protobuf:"varint,4,opt,name=expiry_interval,json=expiryInterval,proto3" json:"expiry_interval,omitempty"`
	DataIdAliases        map[uint32]*DataID                               `protobuf:"bytes,5,rep,name=data_id_aliases,json=dataIdAliases,proto3" json:"data_id_aliases,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Qos                  QoS                                              `protobuf:"varint,6,opt,name=qos,proto3,enum=iscp2.QoS" json:"qos,omitempty"`
	ExtensionFields      *extensions.DownstreamOpenRequestExtensionFields `protobuf:"bytes,7,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *DownstreamOpenRequest) Reset()         { *m = DownstreamOpenRequest{} }
func (m *DownstreamOpenRequest) String() string { return proto.CompactTextString(m) }
func (*DownstreamOpenRequest) ProtoMessage()    {}
func (*DownstreamOpenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ca6b5dd11f9a44, []int{0}
}
func (m *DownstreamOpenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamOpenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamOpenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamOpenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamOpenRequest.Merge(m, src)
}
func (m *DownstreamOpenRequest) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamOpenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamOpenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamOpenRequest proto.InternalMessageInfo

type DownstreamOpenResponse struct {
	RequestId            uint32                                            `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	AssignedStreamId     []byte                                            `protobuf:"bytes,2,opt,name=assigned_stream_id,json=assignedStreamId,proto3" json:"assigned_stream_id,omitempty"`
	ServerTime           int64                                             `protobuf:"zigzag64,3,opt,name=server_time,json=serverTime,proto3" json:"server_time,omitempty"`
	ResultCode           ResultCode                                        `protobuf:"varint,4,opt,name=result_code,json=resultCode,proto3,enum=iscp2.ResultCode" json:"result_code,omitempty"`
	ResultString         string                                            `protobuf:"bytes,5,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields      *extensions.DownstreamOpenResponseExtensionFields `protobuf:"bytes,6,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *DownstreamOpenResponse) Reset()         { *m = DownstreamOpenResponse{} }
func (m *DownstreamOpenResponse) String() string { return proto.CompactTextString(m) }
func (*DownstreamOpenResponse) ProtoMessage()    {}
func (*DownstreamOpenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ca6b5dd11f9a44, []int{1}
}
func (m *DownstreamOpenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamOpenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamOpenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamOpenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamOpenResponse.Merge(m, src)
}
func (m *DownstreamOpenResponse) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamOpenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamOpenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamOpenResponse proto.InternalMessageInfo

type DownstreamResumeRequest struct {
	RequestId            uint32                                             `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	StreamId             []byte                                             `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	DesiredStreamIdAlias uint32                                             `protobuf:"varint,3,opt,name=desired_stream_id_alias,json=desiredStreamIdAlias,proto3" json:"desired_stream_id_alias,omitempty"`
	ExtensionFields      *extensions.DownstreamResumeRequestExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *DownstreamResumeRequest) Reset()         { *m = DownstreamResumeRequest{} }
func (m *DownstreamResumeRequest) String() string { return proto.CompactTextString(m) }
func (*DownstreamResumeRequest) ProtoMessage()    {}
func (*DownstreamResumeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ca6b5dd11f9a44, []int{2}
}
func (m *DownstreamResumeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamResumeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamResumeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamResumeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamResumeRequest.Merge(m, src)
}
func (m *DownstreamResumeRequest) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamResumeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamResumeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamResumeRequest proto.InternalMessageInfo

type DownstreamResumeResponse struct {
	RequestId            uint32                                              `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResultCode           ResultCode                                          `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3,enum=iscp2.ResultCode" json:"result_code,omitempty"`
	ResultString         string                                              `protobuf:"bytes,3,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields      *extensions.DownstreamResumeResponseExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                            `json:"-"`
	XXX_unrecognized     []byte                                              `json:"-"`
	XXX_sizecache        int32                                               `json:"-"`
}

func (m *DownstreamResumeResponse) Reset()         { *m = DownstreamResumeResponse{} }
func (m *DownstreamResumeResponse) String() string { return proto.CompactTextString(m) }
func (*DownstreamResumeResponse) ProtoMessage()    {}
func (*DownstreamResumeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ca6b5dd11f9a44, []int{3}
}
func (m *DownstreamResumeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamResumeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamResumeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamResumeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamResumeResponse.Merge(m, src)
}
func (m *DownstreamResumeResponse) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamResumeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamResumeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamResumeResponse proto.InternalMessageInfo

type DownstreamCloseRequest struct {
	RequestId            uint32                                            `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	StreamId             []byte                                            `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	ExtensionFields      *extensions.DownstreamCloseRequestExtensionFields `protobuf:"bytes,3,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                          `json:"-"`
	XXX_unrecognized     []byte                                            `json:"-"`
	XXX_sizecache        int32                                             `json:"-"`
}

func (m *DownstreamCloseRequest) Reset()         { *m = DownstreamCloseRequest{} }
func (m *DownstreamCloseRequest) String() string { return proto.CompactTextString(m) }
func (*DownstreamCloseRequest) ProtoMessage()    {}
func (*DownstreamCloseRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ca6b5dd11f9a44, []int{4}
}
func (m *DownstreamCloseRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamCloseRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamCloseRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamCloseRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamCloseRequest.Merge(m, src)
}
func (m *DownstreamCloseRequest) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamCloseRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamCloseRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamCloseRequest proto.InternalMessageInfo

type DownstreamCloseResponse struct {
	RequestId            uint32                                             `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResultCode           ResultCode                                         `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3,enum=iscp2.ResultCode" json:"result_code,omitempty"`
	ResultString         string                                             `protobuf:"bytes,3,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields      *extensions.DownstreamCloseResponseExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                           `json:"-"`
	XXX_unrecognized     []byte                                             `json:"-"`
	XXX_sizecache        int32                                              `json:"-"`
}

func (m *DownstreamCloseResponse) Reset()         { *m = DownstreamCloseResponse{} }
func (m *DownstreamCloseResponse) String() string { return proto.CompactTextString(m) }
func (*DownstreamCloseResponse) ProtoMessage()    {}
func (*DownstreamCloseResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ca6b5dd11f9a44, []int{5}
}
func (m *DownstreamCloseResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamCloseResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamCloseResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamCloseResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamCloseResponse.Merge(m, src)
}
func (m *DownstreamCloseResponse) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamCloseResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamCloseResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamCloseResponse proto.InternalMessageInfo

type DownstreamChunk struct {
	StreamIdAlias uint32 `protobuf:"varint,1,opt,name=stream_id_alias,json=streamIdAlias,proto3" json:"stream_id_alias,omitempty"`
	// Types that are valid to be assigned to UpstreamOrAlias:
	//	*DownstreamChunk_UpstreamInfo
	//	*DownstreamChunk_UpstreamAlias
	UpstreamOrAlias      isDownstreamChunk_UpstreamOrAlias          `protobuf_oneof:"upstream_or_alias"`
	StreamChunk          *StreamChunk                               `protobuf:"bytes,4,opt,name=stream_chunk,json=streamChunk,proto3" json:"stream_chunk,omitempty"`
	ExtensionFields      *extensions.DownstreamChunkExtensionFields `protobuf:"bytes,5,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                   `json:"-"`
	XXX_unrecognized     []byte                                     `json:"-"`
	XXX_sizecache        int32                                      `json:"-"`
}

func (m *DownstreamChunk) Reset()         { *m = DownstreamChunk{} }
func (m *DownstreamChunk) String() string { return proto.CompactTextString(m) }
func (*DownstreamChunk) ProtoMessage()    {}
func (*DownstreamChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ca6b5dd11f9a44, []int{6}
}
func (m *DownstreamChunk) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamChunk.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamChunk.Merge(m, src)
}
func (m *DownstreamChunk) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamChunk.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamChunk proto.InternalMessageInfo

type isDownstreamChunk_UpstreamOrAlias interface {
	isDownstreamChunk_UpstreamOrAlias()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DownstreamChunk_UpstreamInfo struct {
	UpstreamInfo *UpstreamInfo `protobuf:"bytes,2,opt,name=upstream_info,json=upstreamInfo,proto3,oneof" json:"upstream_info,omitempty"`
}
type DownstreamChunk_UpstreamAlias struct {
	UpstreamAlias uint32 `protobuf:"varint,3,opt,name=upstream_alias,json=upstreamAlias,proto3,oneof" json:"upstream_alias,omitempty"`
}

func (*DownstreamChunk_UpstreamInfo) isDownstreamChunk_UpstreamOrAlias()  {}
func (*DownstreamChunk_UpstreamAlias) isDownstreamChunk_UpstreamOrAlias() {}

func (m *DownstreamChunk) GetUpstreamOrAlias() isDownstreamChunk_UpstreamOrAlias {
	if m != nil {
		return m.UpstreamOrAlias
	}
	return nil
}

func (m *DownstreamChunk) GetUpstreamInfo() *UpstreamInfo {
	if x, ok := m.GetUpstreamOrAlias().(*DownstreamChunk_UpstreamInfo); ok {
		return x.UpstreamInfo
	}
	return nil
}

func (m *DownstreamChunk) GetUpstreamAlias() uint32 {
	if x, ok := m.GetUpstreamOrAlias().(*DownstreamChunk_UpstreamAlias); ok {
		return x.UpstreamAlias
	}
	return 0
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DownstreamChunk) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DownstreamChunk_UpstreamInfo)(nil),
		(*DownstreamChunk_UpstreamAlias)(nil),
	}
}

type DownstreamChunkAck struct {
	StreamIdAlias        uint32                                        `protobuf:"varint,1,opt,name=stream_id_alias,json=streamIdAlias,proto3" json:"stream_id_alias,omitempty"`
	AckId                uint32                                        `protobuf:"varint,2,opt,name=ack_id,json=ackId,proto3" json:"ack_id,omitempty"`
	Results              []*DownstreamChunkResult                      `protobuf:"bytes,3,rep,name=results,proto3" json:"results,omitempty"`
	UpstreamAliases      map[uint32]*UpstreamInfo                      `protobuf:"bytes,4,rep,name=upstream_aliases,json=upstreamAliases,proto3" json:"upstream_aliases,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	DataIdAliases        map[uint32]*DataID                            `protobuf:"bytes,5,rep,name=data_id_aliases,json=dataIdAliases,proto3" json:"data_id_aliases,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ExtensionFields      *extensions.DownstreamChunkAckExtensionFields `protobuf:"bytes,6,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *DownstreamChunkAck) Reset()         { *m = DownstreamChunkAck{} }
func (m *DownstreamChunkAck) String() string { return proto.CompactTextString(m) }
func (*DownstreamChunkAck) ProtoMessage()    {}
func (*DownstreamChunkAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ca6b5dd11f9a44, []int{7}
}
func (m *DownstreamChunkAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamChunkAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamChunkAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamChunkAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamChunkAck.Merge(m, src)
}
func (m *DownstreamChunkAck) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamChunkAck) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamChunkAck.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamChunkAck proto.InternalMessageInfo

type DownstreamChunkAckComplete struct {
	StreamIdAlias        uint32                                                `protobuf:"varint,1,opt,name=stream_id_alias,json=streamIdAlias,proto3" json:"stream_id_alias,omitempty"`
	AckId                uint32                                                `protobuf:"varint,2,opt,name=ack_id,json=ackId,proto3" json:"ack_id,omitempty"`
	ResultCode           ResultCode                                            `protobuf:"varint,3,opt,name=result_code,json=resultCode,proto3,enum=iscp2.ResultCode" json:"result_code,omitempty"`
	ResultString         string                                                `protobuf:"bytes,4,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields      *extensions.DownstreamChunkAckCompleteExtensionFields `protobuf:"bytes,5,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                              `json:"-"`
	XXX_unrecognized     []byte                                                `json:"-"`
	XXX_sizecache        int32                                                 `json:"-"`
}

func (m *DownstreamChunkAckComplete) Reset()         { *m = DownstreamChunkAckComplete{} }
func (m *DownstreamChunkAckComplete) String() string { return proto.CompactTextString(m) }
func (*DownstreamChunkAckComplete) ProtoMessage()    {}
func (*DownstreamChunkAckComplete) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ca6b5dd11f9a44, []int{8}
}
func (m *DownstreamChunkAckComplete) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamChunkAckComplete) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamChunkAckComplete.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamChunkAckComplete) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamChunkAckComplete.Merge(m, src)
}
func (m *DownstreamChunkAckComplete) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamChunkAckComplete) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamChunkAckComplete.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamChunkAckComplete proto.InternalMessageInfo

type DownstreamMetadata struct {
	RequestId     uint32 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	StreamIdAlias uint32 `protobuf:"varint,13,opt,name=stream_id_alias,json=streamIdAlias,proto3" json:"stream_id_alias,omitempty"`
	// Types that are valid to be assigned to Metadata:
	//	*DownstreamMetadata_BaseTime
	//	*DownstreamMetadata_UpstreamOpen
	//	*DownstreamMetadata_UpstreamAbnormalClose
	//	*DownstreamMetadata_UpstreamResume
	//	*DownstreamMetadata_UpstreamNormalClose
	//	*DownstreamMetadata_DownstreamOpen
	//	*DownstreamMetadata_DownstreamAbnormalClose
	//	*DownstreamMetadata_DownstreamResume
	//	*DownstreamMetadata_DownstreamNormalClose
	Metadata             isDownstreamMetadata_Metadata                 `protobuf_oneof:"metadata"`
	SourceNodeId         string                                        `protobuf:"bytes,11,opt,name=source_node_id,json=sourceNodeId,proto3" json:"source_node_id,omitempty"`
	ExtensionFields      *extensions.DownstreamMetadataExtensionFields `protobuf:"bytes,12,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                      `json:"-"`
	XXX_unrecognized     []byte                                        `json:"-"`
	XXX_sizecache        int32                                         `json:"-"`
}

func (m *DownstreamMetadata) Reset()         { *m = DownstreamMetadata{} }
func (m *DownstreamMetadata) String() string { return proto.CompactTextString(m) }
func (*DownstreamMetadata) ProtoMessage()    {}
func (*DownstreamMetadata) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ca6b5dd11f9a44, []int{9}
}
func (m *DownstreamMetadata) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamMetadata) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamMetadata.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamMetadata) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamMetadata.Merge(m, src)
}
func (m *DownstreamMetadata) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamMetadata) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamMetadata.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamMetadata proto.InternalMessageInfo

type isDownstreamMetadata_Metadata interface {
	isDownstreamMetadata_Metadata()
	Equal(interface{}) bool
	MarshalTo([]byte) (int, error)
	Size() int
}

type DownstreamMetadata_BaseTime struct {
	BaseTime *BaseTime `protobuf:"bytes,2,opt,name=base_time,json=baseTime,proto3,oneof" json:"base_time,omitempty"`
}
type DownstreamMetadata_UpstreamOpen struct {
	UpstreamOpen *UpstreamOpen `protobuf:"bytes,3,opt,name=upstream_open,json=upstreamOpen,proto3,oneof" json:"upstream_open,omitempty"`
}
type DownstreamMetadata_UpstreamAbnormalClose struct {
	UpstreamAbnormalClose *UpstreamAbnormalClose `protobuf:"bytes,4,opt,name=upstream_abnormal_close,json=upstreamAbnormalClose,proto3,oneof" json:"upstream_abnormal_close,omitempty"`
}
type DownstreamMetadata_UpstreamResume struct {
	UpstreamResume *UpstreamResume `protobuf:"bytes,5,opt,name=upstream_resume,json=upstreamResume,proto3,oneof" json:"upstream_resume,omitempty"`
}
type DownstreamMetadata_UpstreamNormalClose struct {
	UpstreamNormalClose *UpstreamNormalClose `protobuf:"bytes,6,opt,name=upstream_normal_close,json=upstreamNormalClose,proto3,oneof" json:"upstream_normal_close,omitempty"`
}
type DownstreamMetadata_DownstreamOpen struct {
	DownstreamOpen *DownstreamOpen `protobuf:"bytes,7,opt,name=downstream_open,json=downstreamOpen,proto3,oneof" json:"downstream_open,omitempty"`
}
type DownstreamMetadata_DownstreamAbnormalClose struct {
	DownstreamAbnormalClose *DownstreamAbnormalClose `protobuf:"bytes,8,opt,name=downstream_abnormal_close,json=downstreamAbnormalClose,proto3,oneof" json:"downstream_abnormal_close,omitempty"`
}
type DownstreamMetadata_DownstreamResume struct {
	DownstreamResume *DownstreamResume `protobuf:"bytes,9,opt,name=downstream_resume,json=downstreamResume,proto3,oneof" json:"downstream_resume,omitempty"`
}
type DownstreamMetadata_DownstreamNormalClose struct {
	DownstreamNormalClose *DownstreamNormalClose `protobuf:"bytes,10,opt,name=downstream_normal_close,json=downstreamNormalClose,proto3,oneof" json:"downstream_normal_close,omitempty"`
}

func (*DownstreamMetadata_BaseTime) isDownstreamMetadata_Metadata()                {}
func (*DownstreamMetadata_UpstreamOpen) isDownstreamMetadata_Metadata()            {}
func (*DownstreamMetadata_UpstreamAbnormalClose) isDownstreamMetadata_Metadata()   {}
func (*DownstreamMetadata_UpstreamResume) isDownstreamMetadata_Metadata()          {}
func (*DownstreamMetadata_UpstreamNormalClose) isDownstreamMetadata_Metadata()     {}
func (*DownstreamMetadata_DownstreamOpen) isDownstreamMetadata_Metadata()          {}
func (*DownstreamMetadata_DownstreamAbnormalClose) isDownstreamMetadata_Metadata() {}
func (*DownstreamMetadata_DownstreamResume) isDownstreamMetadata_Metadata()        {}
func (*DownstreamMetadata_DownstreamNormalClose) isDownstreamMetadata_Metadata()   {}

func (m *DownstreamMetadata) GetMetadata() isDownstreamMetadata_Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DownstreamMetadata) GetBaseTime() *BaseTime {
	if x, ok := m.GetMetadata().(*DownstreamMetadata_BaseTime); ok {
		return x.BaseTime
	}
	return nil
}

func (m *DownstreamMetadata) GetUpstreamOpen() *UpstreamOpen {
	if x, ok := m.GetMetadata().(*DownstreamMetadata_UpstreamOpen); ok {
		return x.UpstreamOpen
	}
	return nil
}

func (m *DownstreamMetadata) GetUpstreamAbnormalClose() *UpstreamAbnormalClose {
	if x, ok := m.GetMetadata().(*DownstreamMetadata_UpstreamAbnormalClose); ok {
		return x.UpstreamAbnormalClose
	}
	return nil
}

func (m *DownstreamMetadata) GetUpstreamResume() *UpstreamResume {
	if x, ok := m.GetMetadata().(*DownstreamMetadata_UpstreamResume); ok {
		return x.UpstreamResume
	}
	return nil
}

func (m *DownstreamMetadata) GetUpstreamNormalClose() *UpstreamNormalClose {
	if x, ok := m.GetMetadata().(*DownstreamMetadata_UpstreamNormalClose); ok {
		return x.UpstreamNormalClose
	}
	return nil
}

func (m *DownstreamMetadata) GetDownstreamOpen() *DownstreamOpen {
	if x, ok := m.GetMetadata().(*DownstreamMetadata_DownstreamOpen); ok {
		return x.DownstreamOpen
	}
	return nil
}

func (m *DownstreamMetadata) GetDownstreamAbnormalClose() *DownstreamAbnormalClose {
	if x, ok := m.GetMetadata().(*DownstreamMetadata_DownstreamAbnormalClose); ok {
		return x.DownstreamAbnormalClose
	}
	return nil
}

func (m *DownstreamMetadata) GetDownstreamResume() *DownstreamResume {
	if x, ok := m.GetMetadata().(*DownstreamMetadata_DownstreamResume); ok {
		return x.DownstreamResume
	}
	return nil
}

func (m *DownstreamMetadata) GetDownstreamNormalClose() *DownstreamNormalClose {
	if x, ok := m.GetMetadata().(*DownstreamMetadata_DownstreamNormalClose); ok {
		return x.DownstreamNormalClose
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*DownstreamMetadata) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*DownstreamMetadata_BaseTime)(nil),
		(*DownstreamMetadata_UpstreamOpen)(nil),
		(*DownstreamMetadata_UpstreamAbnormalClose)(nil),
		(*DownstreamMetadata_UpstreamResume)(nil),
		(*DownstreamMetadata_UpstreamNormalClose)(nil),
		(*DownstreamMetadata_DownstreamOpen)(nil),
		(*DownstreamMetadata_DownstreamAbnormalClose)(nil),
		(*DownstreamMetadata_DownstreamResume)(nil),
		(*DownstreamMetadata_DownstreamNormalClose)(nil),
	}
}

type DownstreamMetadataAck struct {
	RequestId            uint32                                           `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	ResultCode           ResultCode                                       `protobuf:"varint,2,opt,name=result_code,json=resultCode,proto3,enum=iscp2.ResultCode" json:"result_code,omitempty"`
	ResultString         string                                           `protobuf:"bytes,3,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields      *extensions.DownstreamMetadataAckExtensionFields `protobuf:"bytes,4,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                                         `json:"-"`
	XXX_unrecognized     []byte                                           `json:"-"`
	XXX_sizecache        int32                                            `json:"-"`
}

func (m *DownstreamMetadataAck) Reset()         { *m = DownstreamMetadataAck{} }
func (m *DownstreamMetadataAck) String() string { return proto.CompactTextString(m) }
func (*DownstreamMetadataAck) ProtoMessage()    {}
func (*DownstreamMetadataAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ca6b5dd11f9a44, []int{10}
}
func (m *DownstreamMetadataAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamMetadataAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamMetadataAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamMetadataAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamMetadataAck.Merge(m, src)
}
func (m *DownstreamMetadataAck) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamMetadataAck) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamMetadataAck.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamMetadataAck proto.InternalMessageInfo

type UpstreamInfo struct {
	SessionId            string   `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	StreamId             []byte   `protobuf:"bytes,2,opt,name=stream_id,json=streamId,proto3" json:"stream_id,omitempty"`
	SourceNodeId         string   `protobuf:"bytes,3,opt,name=source_node_id,json=sourceNodeId,proto3" json:"source_node_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UpstreamInfo) Reset()         { *m = UpstreamInfo{} }
func (m *UpstreamInfo) String() string { return proto.CompactTextString(m) }
func (*UpstreamInfo) ProtoMessage()    {}
func (*UpstreamInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ca6b5dd11f9a44, []int{11}
}
func (m *UpstreamInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpstreamInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpstreamInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpstreamInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpstreamInfo.Merge(m, src)
}
func (m *UpstreamInfo) XXX_Size() int {
	return m.Size()
}
func (m *UpstreamInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_UpstreamInfo.DiscardUnknown(m)
}

var xxx_messageInfo_UpstreamInfo proto.InternalMessageInfo

type DownstreamChunkResult struct {
	StreamIdOfUpstream       []byte                                           `protobuf:"bytes,1,opt,name=stream_id_of_upstream,json=streamIdOfUpstream,proto3" json:"stream_id_of_upstream,omitempty"`
	SequenceNumberInUpstream uint32                                           `protobuf:"varint,2,opt,name=sequence_number_in_upstream,json=sequenceNumberInUpstream,proto3" json:"sequence_number_in_upstream,omitempty"`
	ResultCode               ResultCode                                       `protobuf:"varint,3,opt,name=result_code,json=resultCode,proto3,enum=iscp2.ResultCode" json:"result_code,omitempty"`
	ResultString             string                                           `protobuf:"bytes,4,opt,name=result_string,json=resultString,proto3" json:"result_string,omitempty"`
	ExtensionFields          *extensions.DownstreamChunkResultExtensionFields `protobuf:"bytes,5,opt,name=extension_fields,json=extensionFields,proto3" json:"extension_fields,omitempty"`
	XXX_NoUnkeyedLiteral     struct{}                                         `json:"-"`
	XXX_unrecognized         []byte                                           `json:"-"`
	XXX_sizecache            int32                                            `json:"-"`
}

func (m *DownstreamChunkResult) Reset()         { *m = DownstreamChunkResult{} }
func (m *DownstreamChunkResult) String() string { return proto.CompactTextString(m) }
func (*DownstreamChunkResult) ProtoMessage()    {}
func (*DownstreamChunkResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_60ca6b5dd11f9a44, []int{12}
}
func (m *DownstreamChunkResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DownstreamChunkResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DownstreamChunkResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DownstreamChunkResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownstreamChunkResult.Merge(m, src)
}
func (m *DownstreamChunkResult) XXX_Size() int {
	return m.Size()
}
func (m *DownstreamChunkResult) XXX_DiscardUnknown() {
	xxx_messageInfo_DownstreamChunkResult.DiscardUnknown(m)
}

var xxx_messageInfo_DownstreamChunkResult proto.InternalMessageInfo

func init() {
	proto.RegisterType((*DownstreamOpenRequest)(nil), "iscp2.DownstreamOpenRequest")
	proto.RegisterMapType((map[uint32]*DataID)(nil), "iscp2.DownstreamOpenRequest.DataIdAliasesEntry")
	proto.RegisterType((*DownstreamOpenResponse)(nil), "iscp2.DownstreamOpenResponse")
	proto.RegisterType((*DownstreamResumeRequest)(nil), "iscp2.DownstreamResumeRequest")
	proto.RegisterType((*DownstreamResumeResponse)(nil), "iscp2.DownstreamResumeResponse")
	proto.RegisterType((*DownstreamCloseRequest)(nil), "iscp2.DownstreamCloseRequest")
	proto.RegisterType((*DownstreamCloseResponse)(nil), "iscp2.DownstreamCloseResponse")
	proto.RegisterType((*DownstreamChunk)(nil), "iscp2.DownstreamChunk")
	proto.RegisterType((*DownstreamChunkAck)(nil), "iscp2.DownstreamChunkAck")
	proto.RegisterMapType((map[uint32]*DataID)(nil), "iscp2.DownstreamChunkAck.DataIdAliasesEntry")
	proto.RegisterMapType((map[uint32]*UpstreamInfo)(nil), "iscp2.DownstreamChunkAck.UpstreamAliasesEntry")
	proto.RegisterType((*DownstreamChunkAckComplete)(nil), "iscp2.DownstreamChunkAckComplete")
	proto.RegisterType((*DownstreamMetadata)(nil), "iscp2.DownstreamMetadata")
	proto.RegisterType((*DownstreamMetadataAck)(nil), "iscp2.DownstreamMetadataAck")
	proto.RegisterType((*UpstreamInfo)(nil), "iscp2.UpstreamInfo")
	proto.RegisterType((*DownstreamChunkResult)(nil), "iscp2.DownstreamChunkResult")
}

func init() { proto.RegisterFile("downstream.proto", fileDescriptor_60ca6b5dd11f9a44) }

var fileDescriptor_60ca6b5dd11f9a44 = []byte{
	// 1283 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x58, 0xdf, 0x6f, 0xdb, 0xd4,
	0x17, 0x8f, 0xe3, 0xa6, 0x6b, 0x4e, 0x7e, 0xb5, 0x77, 0xcb, 0x37, 0xf9, 0x66, 0x23, 0x44, 0x19,
	0xb0, 0xa0, 0x6d, 0x29, 0x04, 0x0d, 0xa1, 0x49, 0x48, 0x74, 0xed, 0xaa, 0xe4, 0x81, 0x76, 0xdc,
	0x8e, 0x16, 0x04, 0x92, 0xe5, 0xc4, 0x37, 0x9d, 0xd5, 0xc4, 0x37, 0xf3, 0xb5, 0xcb, 0xfa, 0x67,
	0xf0, 0x5f, 0xf0, 0xc2, 0xfb, 0x04, 0x3c, 0xf0, 0xb8, 0x47, 0xfe, 0x04, 0x96, 0x07, 0x78, 0x40,
	0xbc, 0x23, 0x1e, 0x10, 0xf2, 0xf5, 0xb5, 0x63, 0x3b, 0x76, 0x5d, 0xc6, 0xd0, 0xde, 0xec, 0x73,
	0xef, 0x39, 0xe7, 0x73, 0x7e, 0x1f, 0x1b, 0xd6, 0x35, 0xfa, 0x95, 0xc1, 0x2c, 0x93, 0xa8, 0xd3,
	0xee, 0xcc, 0xa4, 0x16, 0x45, 0x39, 0x9d, 0x8d, 0x66, 0xbd, 0x46, 0x71, 0x44, 0xa7, 0x53, 0x6a,
	0xb8, 0xc4, 0x46, 0x79, 0x4a, 0x2c, 0x55, 0x53, 0x2d, 0x55, 0xbc, 0x6f, 0x98, 0x84, 0xd9, 0x13,
	0x4b, 0x19, 0x51, 0x8d, 0x08, 0xd2, 0x55, 0xf2, 0xc4, 0x22, 0x06, 0xd3, 0xa9, 0xc1, 0x36, 0xa3,
	0x42, 0x1b, 0xb7, 0x8f, 0x75, 0xeb, 0x91, 0x3d, 0xec, 0x8e, 0xe8, 0x74, 0xf3, 0x98, 0x1e, 0xd3,
	0x4d, 0x4e, 0x1e, 0xda, 0x63, 0xfe, 0xc6, 0x5f, 0xf8, 0x93, 0x7b, 0xbd, 0xfd, 0x97, 0x0c, 0xd5,
	0x1d, 0x5f, 0xc6, 0xfe, 0x8c, 0x18, 0x98, 0x3c, 0xb6, 0x09, 0xb3, 0xd0, 0x6b, 0x00, 0xa6, 0xfb,
	0xa8, 0xe8, 0x5a, 0x5d, 0x6a, 0x49, 0x9d, 0x12, 0xce, 0x0b, 0xca, 0x40, 0x43, 0x77, 0xa0, 0xa6,
	0x11, 0xa6, 0x9b, 0x44, 0x53, 0x5c, 0x5e, 0x45, 0xd7, 0x14, 0x75, 0xa2, 0xab, 0xac, 0x9e, 0xe5,
	0x77, 0xaf, 0x88, 0xe3, 0x03, 0x7e, 0x3a, 0xd0, 0xb6, 0x9c, 0x33, 0xb4, 0x0b, 0x68, 0x01, 0x59,
	0x19, 0xeb, 0x13, 0x8b, 0x98, 0xac, 0x2e, 0xb7, 0xe4, 0x4e, 0xa1, 0x57, 0xeb, 0x72, 0x87, 0x74,
	0x17, 0x78, 0x76, 0xf9, 0x39, 0xde, 0xd0, 0x22, 0x14, 0x86, 0x6e, 0x40, 0x85, 0x3c, 0x99, 0xe9,
	0xe6, 0x99, 0xa2, 0x1b, 0x16, 0x31, 0x4f, 0xd5, 0x49, 0x7d, 0x85, 0xab, 0x2d, 0xbb, 0xe4, 0x81,
	0xa0, 0xa2, 0x23, 0xa8, 0x38, 0xde, 0xf4, 0xd1, 0x11, 0x56, 0xcf, 0x71, 0x6d, 0x9b, 0x4b, 0xda,
	0x02, 0xd6, 0x77, 0x77, 0x54, 0x4b, 0x15, 0x98, 0x09, 0xbb, 0x6f, 0x58, 0xe6, 0x19, 0x2e, 0x69,
	0x41, 0x1a, 0xba, 0x06, 0xf2, 0x63, 0xca, 0xea, 0xab, 0x2d, 0xa9, 0x53, 0xee, 0x81, 0x10, 0xf6,
	0x09, 0x3d, 0xc0, 0x0e, 0x19, 0x1d, 0xc2, 0xba, 0x1f, 0x25, 0x65, 0xac, 0x93, 0x89, 0xc6, 0xea,
	0x97, 0x5a, 0x52, 0xa7, 0xd0, 0xbb, 0x79, 0x9e, 0xde, 0xfb, 0x1e, 0xcf, 0x2e, 0x67, 0xc1, 0x15,
	0x12, 0x26, 0x34, 0xf6, 0x01, 0x2d, 0x43, 0x43, 0xeb, 0x20, 0x9f, 0x90, 0x33, 0x11, 0x24, 0xe7,
	0x11, 0x5d, 0x87, 0xdc, 0xa9, 0x3a, 0xb1, 0x09, 0x0f, 0x46, 0xa1, 0x57, 0xf2, 0x94, 0x3a, 0xbc,
	0x3b, 0xd8, 0x3d, 0xbb, 0x9b, 0xfd, 0x40, 0x6a, 0x3f, 0xcd, 0xc2, 0xff, 0xa2, 0x50, 0xd8, 0x8c,
	0x1a, 0x8c, 0xa4, 0x65, 0xc0, 0x2d, 0x40, 0x2a, 0x63, 0xfa, 0xb1, 0x11, 0x4c, 0x01, 0xae, 0xaf,
	0x88, 0xd7, 0xbd, 0x13, 0x2f, 0xfa, 0xe8, 0x75, 0x28, 0x30, 0x62, 0x9e, 0x12, 0x53, 0xb1, 0xf4,
	0x29, 0xa9, 0xcb, 0x2d, 0xa9, 0x83, 0x30, 0xb8, 0xa4, 0x87, 0xfa, 0x94, 0xa0, 0x1e, 0x14, 0x02,
	0xa9, 0xce, 0xa3, 0x59, 0xee, 0x6d, 0x08, 0xdc, 0x98, 0x9f, 0x6c, 0x53, 0x8d, 0x60, 0x30, 0xfd,
	0x67, 0x74, 0x1d, 0x4a, 0x82, 0x87, 0x59, 0xa6, 0x6e, 0x1c, 0xd7, 0x73, 0x2d, 0xa9, 0x93, 0xc7,
	0x45, 0x97, 0x78, 0xc0, 0x69, 0xe8, 0x28, 0x26, 0x14, 0xab, 0xdc, 0x2b, 0xb7, 0x12, 0x42, 0xe1,
	0xda, 0x9f, 0x16, 0x8b, 0xf6, 0x2f, 0x12, 0xd4, 0x16, 0xac, 0x0e, 0xc4, 0x29, 0xb9, 0x60, 0xf5,
	0x5c, 0x85, 0x7c, 0xd4, 0x65, 0x6b, 0xcc, 0x73, 0xd5, 0x39, 0xa5, 0x25, 0x9f, 0x53, 0x5a, 0x9f,
	0xc5, 0xd8, 0xb9, 0xc2, 0xed, 0xbc, 0xbd, 0x64, 0x67, 0x08, 0x6c, 0xaa, 0xa1, 0xbf, 0x4b, 0x50,
	0x5f, 0xe6, 0xbd, 0x58, 0x96, 0x44, 0xc2, 0x9a, 0x7d, 0xa1, 0xb0, 0xca, 0x31, 0x61, 0xfd, 0x3c,
	0xd1, 0xdc, 0x6e, 0xa2, 0xb9, 0x17, 0x0c, 0xec, 0xb7, 0x52, 0xb0, 0x26, 0xb6, 0x27, 0x94, 0xbd,
	0x94, 0xb8, 0xc6, 0x25, 0xa2, 0x9c, 0x90, 0x88, 0x41, 0xa5, 0xa9, 0x78, 0x7f, 0x0b, 0x25, 0xa2,
	0x60, 0x7d, 0xc5, 0xe1, 0xf9, 0x27, 0xd9, 0x18, 0x42, 0x9c, 0x6a, 0xed, 0x0f, 0x59, 0xa8, 0x04,
	0x78, 0x1f, 0xd9, 0xc6, 0x09, 0x7a, 0x0b, 0x2a, 0xd1, 0x52, 0x71, 0x4d, 0x2d, 0xb1, 0x50, 0x8d,
	0xdc, 0x85, 0x92, 0x3d, 0xf3, 0x6e, 0x1a, 0x63, 0x2a, 0xda, 0xe3, 0x65, 0x01, 0xe9, 0x53, 0x71,
	0x36, 0x30, 0xc6, 0xb4, 0x9f, 0xc1, 0x45, 0x3b, 0xf0, 0x8e, 0x6e, 0x40, 0xd9, 0xe7, 0x0d, 0x54,
	0x63, 0x3f, 0x83, 0x7d, 0x99, 0xae, 0x92, 0x3b, 0x50, 0x14, 0xd7, 0x46, 0x0e, 0x38, 0x61, 0x36,
	0x12, 0x3a, 0x0e, 0x16, 0xb0, 0x71, 0x21, 0x68, 0xc3, 0x83, 0x18, 0x8f, 0xe5, 0x38, 0xeb, 0x9b,
	0xcb, 0x1e, 0x73, 0x38, 0xd2, 0x3c, 0x75, 0xef, 0x32, 0x6c, 0xf8, 0x88, 0xa9, 0xe9, 0x82, 0x6e,
	0x7f, 0xbf, 0x02, 0x28, 0x22, 0x68, 0x6b, 0x74, 0x71, 0x0f, 0x56, 0x61, 0x55, 0x1d, 0x9d, 0x78,
	0xe9, 0x5d, 0xc2, 0x39, 0x75, 0x74, 0x32, 0xd0, 0xd0, 0xfb, 0x70, 0xc9, 0x0d, 0xbf, 0x37, 0xcc,
	0xaf, 0xc5, 0x63, 0x76, 0x53, 0x0a, 0x7b, 0x97, 0x9d, 0x2a, 0x0e, 0x3b, 0x95, 0x38, 0x69, 0x22,
	0xc7, 0x56, 0xb1, 0x87, 0xd5, 0x0f, 0x53, 0x68, 0x3c, 0x57, 0xec, 0x30, 0x15, 0x3d, 0x4c, 0x9a,
	0xfc, 0xb7, 0x92, 0x25, 0xa7, 0x8f, 0xfd, 0x83, 0xc4, 0x69, 0xd2, 0x49, 0x14, 0x9b, 0x3a, 0xd5,
	0x8f, 0xe0, 0x4a, 0x9c, 0x4d, 0x31, 0x73, 0xfd, 0xed, 0xf0, 0x5c, 0x8f, 0x4b, 0xdc, 0xc0, 0x74,
	0x7f, 0xf9, 0xeb, 0xc2, 0xd7, 0x59, 0x68, 0x2c, 0x1b, 0xb8, 0x4d, 0xa7, 0xb3, 0x09, 0xb1, 0xc8,
	0xbf, 0xcd, 0xa2, 0x48, 0x37, 0x92, 0x5f, 0xa8, 0x1b, 0xad, 0xc4, 0x74, 0xa3, 0x2f, 0x12, 0x6b,
	0xeb, 0x9d, 0xc4, 0xa8, 0x79, 0x46, 0xa5, 0x36, 0xa4, 0x3f, 0x57, 0x83, 0x15, 0xf5, 0xb1, 0xd8,
	0xdf, 0xd3, 0x3a, 0x6f, 0x8c, 0xab, 0x4a, 0x71, 0xae, 0xea, 0x42, 0x7e, 0xa8, 0x32, 0xe2, 0xae,
	0x4d, 0x6e, 0x78, 0x2a, 0x02, 0xf3, 0x3d, 0x95, 0x11, 0x67, 0x77, 0xea, 0x67, 0xf0, 0xda, 0x50,
	0x3c, 0x87, 0x5a, 0x1c, 0x9d, 0x11, 0x43, 0x8c, 0x98, 0x68, 0xa6, 0x38, 0x9b, 0x4e, 0xb0, 0xc5,
	0x39, 0xef, 0xe8, 0x10, 0x6a, 0x8b, 0x6a, 0x1c, 0x1a, 0xd4, 0x9c, 0xaa, 0x13, 0x65, 0xe4, 0x74,
	0x67, 0xd1, 0xc4, 0xae, 0x45, 0xa4, 0x6c, 0x89, 0x4b, 0xbc, 0x83, 0xf7, 0x33, 0xb8, 0x6a, 0xc7,
	0x1d, 0xa0, 0x8f, 0xc0, 0xaf, 0x4e, 0xc5, 0xe4, 0xb3, 0x58, 0x78, 0xbf, 0x1a, 0x91, 0xe7, 0x0e,
	0xea, 0x7e, 0x06, 0xfb, 0xad, 0xd6, 0xa5, 0xa0, 0x07, 0xe0, 0x8b, 0x56, 0x42, 0xb8, 0xdc, 0xda,
	0x6b, 0x44, 0xe4, 0xec, 0x85, 0x50, 0x5d, 0xb6, 0x97, 0xc9, 0x0e, 0xa6, 0xc0, 0x97, 0x08, 0xf7,
	0xd4, 0xa5, 0x10, 0xa6, 0xf0, 0x56, 0xe8, 0x60, 0xd2, 0x42, 0x14, 0xf4, 0x25, 0xfc, 0x3f, 0x20,
	0x21, 0xe2, 0xaf, 0x35, 0x2e, 0xab, 0xb9, 0x24, 0x2b, 0xea, 0xb1, 0x9a, 0x16, 0x7f, 0x84, 0x76,
	0x21, 0xf0, 0xd9, 0xe3, 0x79, 0x2d, 0xcf, 0xa5, 0xd6, 0x12, 0x16, 0x9c, 0x7e, 0x06, 0x07, 0xbe,
	0x32, 0x85, 0xe7, 0x0e, 0x21, 0xa0, 0x22, 0xec, 0x3b, 0x08, 0xc5, 0x74, 0x21, 0x2d, 0xec, 0xbd,
	0xaa, 0x16, 0x77, 0x80, 0xde, 0x80, 0x32, 0xa3, 0xb6, 0x39, 0x22, 0x8a, 0x41, 0x35, 0xe2, 0xa4,
	0x78, 0xc1, 0x2d, 0x3c, 0x97, 0xba, 0x47, 0x35, 0x32, 0xd0, 0x62, 0xdb, 0x65, 0x31, 0xa1, 0x5d,
	0x7a, 0x95, 0x93, 0x3a, 0xd7, 0x00, 0xd6, 0xbc, 0xaf, 0xe4, 0xf6, 0xaf, 0x52, 0xf0, 0x03, 0xd6,
	0x13, 0xe1, 0x4c, 0xb4, 0x57, 0xb5, 0xf9, 0x1c, 0x26, 0x6e, 0x3e, 0x37, 0x13, 0x4d, 0xbe, 0xc0,
	0x90, 0x68, 0xcf, 0xa0, 0x18, 0x6c, 0xf3, 0x8e, 0x7d, 0x8c, 0x30, 0xae, 0x45, 0xd8, 0x97, 0xc7,
	0x79, 0x41, 0x49, 0x5b, 0x45, 0x97, 0x83, 0x27, 0x2f, 0x07, 0xaf, 0xfd, 0x5d, 0x36, 0xe8, 0xdb,
	0xc0, 0xfc, 0x46, 0xef, 0x42, 0x75, 0xd1, 0xbc, 0xe8, 0x58, 0xf1, 0x0a, 0x8c, 0xc3, 0x28, 0x62,
	0xe4, 0x29, 0xda, 0x1f, 0x7b, 0x90, 0xd1, 0x87, 0x70, 0x95, 0x39, 0xce, 0x37, 0x1c, 0xa5, 0xf6,
	0x74, 0x48, 0x4c, 0x45, 0x37, 0x16, 0x8c, 0xee, 0x1c, 0xa8, 0x7b, 0x57, 0xf6, 0xf8, 0x8d, 0x81,
	0xe1, 0xb3, 0xff, 0x67, 0xa3, 0xe1, 0x30, 0x71, 0x34, 0xdc, 0x3c, 0x6f, 0x85, 0x49, 0x4d, 0xd2,
	0xd6, 0xb3, 0xe7, 0xcd, 0xcc, 0x1f, 0xcf, 0x9b, 0xd2, 0x37, 0xf3, 0xa6, 0xf4, 0x74, 0xde, 0x94,
	0x7e, 0x9c, 0x37, 0xa5, 0x67, 0xf3, 0xa6, 0xf4, 0xd3, 0xbc, 0x29, 0xfd, 0x3c, 0x6f, 0x4a, 0xc3,
	0x55, 0xfe, 0x0b, 0xe6, 0xbd, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf1, 0x4b, 0xd0, 0xab, 0x1a,
	0x12, 0x00, 0x00,
}

func (this *DownstreamOpenRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamOpenRequest)
	if !ok {
		that2, ok := that.(DownstreamOpenRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.DesiredStreamIdAlias != that1.DesiredStreamIdAlias {
		return false
	}
	if len(this.DownstreamFilters) != len(that1.DownstreamFilters) {
		return false
	}
	for i := range this.DownstreamFilters {
		if !this.DownstreamFilters[i].Equal(that1.DownstreamFilters[i]) {
			return false
		}
	}
	if this.ExpiryInterval != that1.ExpiryInterval {
		return false
	}
	if len(this.DataIdAliases) != len(that1.DataIdAliases) {
		return false
	}
	for i := range this.DataIdAliases {
		if !this.DataIdAliases[i].Equal(that1.DataIdAliases[i]) {
			return false
		}
	}
	if this.Qos != that1.Qos {
		return false
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DownstreamOpenResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamOpenResponse)
	if !ok {
		that2, ok := that.(DownstreamOpenResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if !bytes.Equal(this.AssignedStreamId, that1.AssignedStreamId) {
		return false
	}
	if this.ServerTime != that1.ServerTime {
		return false
	}
	if this.ResultCode != that1.ResultCode {
		return false
	}
	if this.ResultString != that1.ResultString {
		return false
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DownstreamResumeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamResumeRequest)
	if !ok {
		that2, ok := that.(DownstreamResumeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if !bytes.Equal(this.StreamId, that1.StreamId) {
		return false
	}
	if this.DesiredStreamIdAlias != that1.DesiredStreamIdAlias {
		return false
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DownstreamResumeResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamResumeResponse)
	if !ok {
		that2, ok := that.(DownstreamResumeResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.ResultCode != that1.ResultCode {
		return false
	}
	if this.ResultString != that1.ResultString {
		return false
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DownstreamCloseRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamCloseRequest)
	if !ok {
		that2, ok := that.(DownstreamCloseRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if !bytes.Equal(this.StreamId, that1.StreamId) {
		return false
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DownstreamCloseResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamCloseResponse)
	if !ok {
		that2, ok := that.(DownstreamCloseResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.ResultCode != that1.ResultCode {
		return false
	}
	if this.ResultString != that1.ResultString {
		return false
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DownstreamChunk) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamChunk)
	if !ok {
		that2, ok := that.(DownstreamChunk)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StreamIdAlias != that1.StreamIdAlias {
		return false
	}
	if that1.UpstreamOrAlias == nil {
		if this.UpstreamOrAlias != nil {
			return false
		}
	} else if this.UpstreamOrAlias == nil {
		return false
	} else if !this.UpstreamOrAlias.Equal(that1.UpstreamOrAlias) {
		return false
	}
	if !this.StreamChunk.Equal(that1.StreamChunk) {
		return false
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DownstreamChunk_UpstreamInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamChunk_UpstreamInfo)
	if !ok {
		that2, ok := that.(DownstreamChunk_UpstreamInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpstreamInfo.Equal(that1.UpstreamInfo) {
		return false
	}
	return true
}
func (this *DownstreamChunk_UpstreamAlias) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamChunk_UpstreamAlias)
	if !ok {
		that2, ok := that.(DownstreamChunk_UpstreamAlias)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.UpstreamAlias != that1.UpstreamAlias {
		return false
	}
	return true
}
func (this *DownstreamChunkAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamChunkAck)
	if !ok {
		that2, ok := that.(DownstreamChunkAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StreamIdAlias != that1.StreamIdAlias {
		return false
	}
	if this.AckId != that1.AckId {
		return false
	}
	if len(this.Results) != len(that1.Results) {
		return false
	}
	for i := range this.Results {
		if !this.Results[i].Equal(that1.Results[i]) {
			return false
		}
	}
	if len(this.UpstreamAliases) != len(that1.UpstreamAliases) {
		return false
	}
	for i := range this.UpstreamAliases {
		if !this.UpstreamAliases[i].Equal(that1.UpstreamAliases[i]) {
			return false
		}
	}
	if len(this.DataIdAliases) != len(that1.DataIdAliases) {
		return false
	}
	for i := range this.DataIdAliases {
		if !this.DataIdAliases[i].Equal(that1.DataIdAliases[i]) {
			return false
		}
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DownstreamChunkAckComplete) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamChunkAckComplete)
	if !ok {
		that2, ok := that.(DownstreamChunkAckComplete)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.StreamIdAlias != that1.StreamIdAlias {
		return false
	}
	if this.AckId != that1.AckId {
		return false
	}
	if this.ResultCode != that1.ResultCode {
		return false
	}
	if this.ResultString != that1.ResultString {
		return false
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DownstreamMetadata) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamMetadata)
	if !ok {
		that2, ok := that.(DownstreamMetadata)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.StreamIdAlias != that1.StreamIdAlias {
		return false
	}
	if that1.Metadata == nil {
		if this.Metadata != nil {
			return false
		}
	} else if this.Metadata == nil {
		return false
	} else if !this.Metadata.Equal(that1.Metadata) {
		return false
	}
	if this.SourceNodeId != that1.SourceNodeId {
		return false
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DownstreamMetadata_BaseTime) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamMetadata_BaseTime)
	if !ok {
		that2, ok := that.(DownstreamMetadata_BaseTime)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BaseTime.Equal(that1.BaseTime) {
		return false
	}
	return true
}
func (this *DownstreamMetadata_UpstreamOpen) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamMetadata_UpstreamOpen)
	if !ok {
		that2, ok := that.(DownstreamMetadata_UpstreamOpen)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpstreamOpen.Equal(that1.UpstreamOpen) {
		return false
	}
	return true
}
func (this *DownstreamMetadata_UpstreamAbnormalClose) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamMetadata_UpstreamAbnormalClose)
	if !ok {
		that2, ok := that.(DownstreamMetadata_UpstreamAbnormalClose)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpstreamAbnormalClose.Equal(that1.UpstreamAbnormalClose) {
		return false
	}
	return true
}
func (this *DownstreamMetadata_UpstreamResume) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamMetadata_UpstreamResume)
	if !ok {
		that2, ok := that.(DownstreamMetadata_UpstreamResume)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpstreamResume.Equal(that1.UpstreamResume) {
		return false
	}
	return true
}
func (this *DownstreamMetadata_UpstreamNormalClose) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamMetadata_UpstreamNormalClose)
	if !ok {
		that2, ok := that.(DownstreamMetadata_UpstreamNormalClose)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.UpstreamNormalClose.Equal(that1.UpstreamNormalClose) {
		return false
	}
	return true
}
func (this *DownstreamMetadata_DownstreamOpen) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamMetadata_DownstreamOpen)
	if !ok {
		that2, ok := that.(DownstreamMetadata_DownstreamOpen)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownstreamOpen.Equal(that1.DownstreamOpen) {
		return false
	}
	return true
}
func (this *DownstreamMetadata_DownstreamAbnormalClose) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamMetadata_DownstreamAbnormalClose)
	if !ok {
		that2, ok := that.(DownstreamMetadata_DownstreamAbnormalClose)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownstreamAbnormalClose.Equal(that1.DownstreamAbnormalClose) {
		return false
	}
	return true
}
func (this *DownstreamMetadata_DownstreamResume) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamMetadata_DownstreamResume)
	if !ok {
		that2, ok := that.(DownstreamMetadata_DownstreamResume)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownstreamResume.Equal(that1.DownstreamResume) {
		return false
	}
	return true
}
func (this *DownstreamMetadata_DownstreamNormalClose) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamMetadata_DownstreamNormalClose)
	if !ok {
		that2, ok := that.(DownstreamMetadata_DownstreamNormalClose)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.DownstreamNormalClose.Equal(that1.DownstreamNormalClose) {
		return false
	}
	return true
}
func (this *DownstreamMetadataAck) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamMetadataAck)
	if !ok {
		that2, ok := that.(DownstreamMetadataAck)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.RequestId != that1.RequestId {
		return false
	}
	if this.ResultCode != that1.ResultCode {
		return false
	}
	if this.ResultString != that1.ResultString {
		return false
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *UpstreamInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*UpstreamInfo)
	if !ok {
		that2, ok := that.(UpstreamInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SessionId != that1.SessionId {
		return false
	}
	if !bytes.Equal(this.StreamId, that1.StreamId) {
		return false
	}
	if this.SourceNodeId != that1.SourceNodeId {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *DownstreamChunkResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*DownstreamChunkResult)
	if !ok {
		that2, ok := that.(DownstreamChunkResult)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.StreamIdOfUpstream, that1.StreamIdOfUpstream) {
		return false
	}
	if this.SequenceNumberInUpstream != that1.SequenceNumberInUpstream {
		return false
	}
	if this.ResultCode != that1.ResultCode {
		return false
	}
	if this.ResultString != that1.ResultString {
		return false
	}
	if !this.ExtensionFields.Equal(that1.ExtensionFields) {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *DownstreamOpenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamOpenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamOpenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Qos != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.Qos))
		i--
		dAtA[i] = 0x30
	}
	if len(m.DataIdAliases) > 0 {
		for k := range m.DataIdAliases {
			v := m.DataIdAliases[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDownstream(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintDownstream(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDownstream(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.ExpiryInterval != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.ExpiryInterval))
		i--
		dAtA[i] = 0x20
	}
	if len(m.DownstreamFilters) > 0 {
		for iNdEx := len(m.DownstreamFilters) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DownstreamFilters[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDownstream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.DesiredStreamIdAlias != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.DesiredStreamIdAlias))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestId != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamOpenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamOpenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamOpenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintDownstream(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ResultCode != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x20
	}
	if m.ServerTime != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64((uint64(m.ServerTime)<<1)^uint64((m.ServerTime>>63))))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AssignedStreamId) > 0 {
		i -= len(m.AssignedStreamId)
		copy(dAtA[i:], m.AssignedStreamId)
		i = encodeVarintDownstream(dAtA, i, uint64(len(m.AssignedStreamId)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestId != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamResumeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamResumeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamResumeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DesiredStreamIdAlias != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.DesiredStreamIdAlias))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintDownstream(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestId != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamResumeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamResumeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamResumeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintDownstream(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResultCode != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestId != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamCloseRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamCloseRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamCloseRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintDownstream(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0x12
	}
	if m.RequestId != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamCloseResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamCloseResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamCloseResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintDownstream(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResultCode != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestId != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamChunk) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamChunk) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamChunk) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.StreamChunk != nil {
		{
			size, err := m.StreamChunk.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.UpstreamOrAlias != nil {
		{
			size := m.UpstreamOrAlias.Size()
			i -= size
			if _, err := m.UpstreamOrAlias.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.StreamIdAlias != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.StreamIdAlias))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamChunk_UpstreamInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamChunk_UpstreamInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamInfo != nil {
		{
			size, err := m.UpstreamInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamChunk_UpstreamAlias) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamChunk_UpstreamAlias) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	i = encodeVarintDownstream(dAtA, i, uint64(m.UpstreamAlias))
	i--
	dAtA[i] = 0x18
	return len(dAtA) - i, nil
}
func (m *DownstreamChunkAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamChunkAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamChunkAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if len(m.DataIdAliases) > 0 {
		for k := range m.DataIdAliases {
			v := m.DataIdAliases[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDownstream(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintDownstream(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDownstream(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.UpstreamAliases) > 0 {
		for k := range m.UpstreamAliases {
			v := m.UpstreamAliases[k]
			baseI := i
			if v != nil {
				{
					size, err := v.MarshalToSizedBuffer(dAtA[:i])
					if err != nil {
						return 0, err
					}
					i -= size
					i = encodeVarintDownstream(dAtA, i, uint64(size))
				}
				i--
				dAtA[i] = 0x12
			}
			i = encodeVarintDownstream(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintDownstream(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Results[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDownstream(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.AckId != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.AckId))
		i--
		dAtA[i] = 0x10
	}
	if m.StreamIdAlias != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.StreamIdAlias))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamChunkAckComplete) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamChunkAckComplete) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamChunkAckComplete) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintDownstream(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x22
	}
	if m.ResultCode != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x18
	}
	if m.AckId != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.AckId))
		i--
		dAtA[i] = 0x10
	}
	if m.StreamIdAlias != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.StreamIdAlias))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamMetadata) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamMetadata) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamMetadata) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.StreamIdAlias != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.StreamIdAlias))
		i--
		dAtA[i] = 0x68
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if len(m.SourceNodeId) > 0 {
		i -= len(m.SourceNodeId)
		copy(dAtA[i:], m.SourceNodeId)
		i = encodeVarintDownstream(dAtA, i, uint64(len(m.SourceNodeId)))
		i--
		dAtA[i] = 0x5a
	}
	if m.Metadata != nil {
		{
			size := m.Metadata.Size()
			i -= size
			if _, err := m.Metadata.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RequestId != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamMetadata_BaseTime) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamMetadata_BaseTime) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.BaseTime != nil {
		{
			size, err := m.BaseTime.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamMetadata_UpstreamOpen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamMetadata_UpstreamOpen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamOpen != nil {
		{
			size, err := m.UpstreamOpen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamMetadata_UpstreamAbnormalClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamMetadata_UpstreamAbnormalClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamAbnormalClose != nil {
		{
			size, err := m.UpstreamAbnormalClose.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamMetadata_UpstreamResume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamMetadata_UpstreamResume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamResume != nil {
		{
			size, err := m.UpstreamResume.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamMetadata_UpstreamNormalClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamMetadata_UpstreamNormalClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.UpstreamNormalClose != nil {
		{
			size, err := m.UpstreamNormalClose.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamMetadata_DownstreamOpen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamMetadata_DownstreamOpen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamOpen != nil {
		{
			size, err := m.DownstreamOpen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamMetadata_DownstreamAbnormalClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamMetadata_DownstreamAbnormalClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamAbnormalClose != nil {
		{
			size, err := m.DownstreamAbnormalClose.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamMetadata_DownstreamResume) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamMetadata_DownstreamResume) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamResume != nil {
		{
			size, err := m.DownstreamResume.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamMetadata_DownstreamNormalClose) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamMetadata_DownstreamNormalClose) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.DownstreamNormalClose != nil {
		{
			size, err := m.DownstreamNormalClose.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	return len(dAtA) - i, nil
}
func (m *DownstreamMetadataAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamMetadataAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamMetadataAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintDownstream(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ResultCode != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x10
	}
	if m.RequestId != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UpstreamInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpstreamInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UpstreamInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SourceNodeId) > 0 {
		i -= len(m.SourceNodeId)
		copy(dAtA[i:], m.SourceNodeId)
		i = encodeVarintDownstream(dAtA, i, uint64(len(m.SourceNodeId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StreamId) > 0 {
		i -= len(m.StreamId)
		copy(dAtA[i:], m.StreamId)
		i = encodeVarintDownstream(dAtA, i, uint64(len(m.StreamId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SessionId) > 0 {
		i -= len(m.SessionId)
		copy(dAtA[i:], m.SessionId)
		i = encodeVarintDownstream(dAtA, i, uint64(len(m.SessionId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DownstreamChunkResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DownstreamChunkResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DownstreamChunkResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ExtensionFields != nil {
		{
			size, err := m.ExtensionFields.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintDownstream(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ResultString) > 0 {
		i -= len(m.ResultString)
		copy(dAtA[i:], m.ResultString)
		i = encodeVarintDownstream(dAtA, i, uint64(len(m.ResultString)))
		i--
		dAtA[i] = 0x22
	}
	if m.ResultCode != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.ResultCode))
		i--
		dAtA[i] = 0x18
	}
	if m.SequenceNumberInUpstream != 0 {
		i = encodeVarintDownstream(dAtA, i, uint64(m.SequenceNumberInUpstream))
		i--
		dAtA[i] = 0x10
	}
	if len(m.StreamIdOfUpstream) > 0 {
		i -= len(m.StreamIdOfUpstream)
		copy(dAtA[i:], m.StreamIdOfUpstream)
		i = encodeVarintDownstream(dAtA, i, uint64(len(m.StreamIdOfUpstream)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDownstream(dAtA []byte, offset int, v uint64) int {
	offset -= sovDownstream(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedDownstreamOpenRequest(r randyDownstream, easy bool) *DownstreamOpenRequest {
	this := &DownstreamOpenRequest{}
	this.RequestId = uint32(r.Uint32())
	this.DesiredStreamIdAlias = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v1 := r.Intn(5)
		this.DownstreamFilters = make([]*DownstreamFilter, v1)
		for i := 0; i < v1; i++ {
			this.DownstreamFilters[i] = NewPopulatedDownstreamFilter(r, easy)
		}
	}
	this.ExpiryInterval = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v2 := r.Intn(10)
		this.DataIdAliases = make(map[uint32]*DataID)
		for i := 0; i < v2; i++ {
			this.DataIdAliases[uint32(r.Uint32())] = NewPopulatedDataID(r, easy)
		}
	}
	this.Qos = QoS([]int32{0, 1, 2}[r.Intn(3)])
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedDownstreamOpenRequestExtensionFields(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDownstream(r, 8)
	}
	return this
}

func NewPopulatedDownstreamOpenResponse(r randyDownstream, easy bool) *DownstreamOpenResponse {
	this := &DownstreamOpenResponse{}
	this.RequestId = uint32(r.Uint32())
	v3 := r.Intn(100)
	this.AssignedStreamId = make([]byte, v3)
	for i := 0; i < v3; i++ {
		this.AssignedStreamId[i] = byte(r.Intn(256))
	}
	this.ServerTime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.ServerTime *= -1
	}
	this.ResultCode = ResultCode([]int32{0, 0, 1, 2, 3, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 128, 129, 130, 131}[r.Intn(36)])
	this.ResultString = string(randStringDownstream(r))
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedDownstreamOpenResponseExtensionFields(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDownstream(r, 7)
	}
	return this
}

func NewPopulatedDownstreamResumeRequest(r randyDownstream, easy bool) *DownstreamResumeRequest {
	this := &DownstreamResumeRequest{}
	this.RequestId = uint32(r.Uint32())
	v4 := r.Intn(100)
	this.StreamId = make([]byte, v4)
	for i := 0; i < v4; i++ {
		this.StreamId[i] = byte(r.Intn(256))
	}
	this.DesiredStreamIdAlias = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedDownstreamResumeRequestExtensionFields(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDownstream(r, 5)
	}
	return this
}

func NewPopulatedDownstreamResumeResponse(r randyDownstream, easy bool) *DownstreamResumeResponse {
	this := &DownstreamResumeResponse{}
	this.RequestId = uint32(r.Uint32())
	this.ResultCode = ResultCode([]int32{0, 0, 1, 2, 3, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 128, 129, 130, 131}[r.Intn(36)])
	this.ResultString = string(randStringDownstream(r))
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedDownstreamResumeResponseExtensionFields(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDownstream(r, 5)
	}
	return this
}

func NewPopulatedDownstreamCloseRequest(r randyDownstream, easy bool) *DownstreamCloseRequest {
	this := &DownstreamCloseRequest{}
	this.RequestId = uint32(r.Uint32())
	v5 := r.Intn(100)
	this.StreamId = make([]byte, v5)
	for i := 0; i < v5; i++ {
		this.StreamId[i] = byte(r.Intn(256))
	}
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedDownstreamCloseRequestExtensionFields(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDownstream(r, 4)
	}
	return this
}

func NewPopulatedDownstreamCloseResponse(r randyDownstream, easy bool) *DownstreamCloseResponse {
	this := &DownstreamCloseResponse{}
	this.RequestId = uint32(r.Uint32())
	this.ResultCode = ResultCode([]int32{0, 0, 1, 2, 3, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 128, 129, 130, 131}[r.Intn(36)])
	this.ResultString = string(randStringDownstream(r))
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedDownstreamCloseResponseExtensionFields(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDownstream(r, 5)
	}
	return this
}

func NewPopulatedDownstreamChunk(r randyDownstream, easy bool) *DownstreamChunk {
	this := &DownstreamChunk{}
	this.StreamIdAlias = uint32(r.Uint32())
	oneofNumber_UpstreamOrAlias := []int32{2, 3}[r.Intn(2)]
	switch oneofNumber_UpstreamOrAlias {
	case 2:
		this.UpstreamOrAlias = NewPopulatedDownstreamChunk_UpstreamInfo(r, easy)
	case 3:
		this.UpstreamOrAlias = NewPopulatedDownstreamChunk_UpstreamAlias(r, easy)
	}
	if r.Intn(5) != 0 {
		this.StreamChunk = NewPopulatedStreamChunk(r, easy)
	}
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedDownstreamChunkExtensionFields(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDownstream(r, 6)
	}
	return this
}

func NewPopulatedDownstreamChunk_UpstreamInfo(r randyDownstream, easy bool) *DownstreamChunk_UpstreamInfo {
	this := &DownstreamChunk_UpstreamInfo{}
	this.UpstreamInfo = NewPopulatedUpstreamInfo(r, easy)
	return this
}
func NewPopulatedDownstreamChunk_UpstreamAlias(r randyDownstream, easy bool) *DownstreamChunk_UpstreamAlias {
	this := &DownstreamChunk_UpstreamAlias{}
	this.UpstreamAlias = uint32(r.Uint32())
	return this
}
func NewPopulatedDownstreamChunkAck(r randyDownstream, easy bool) *DownstreamChunkAck {
	this := &DownstreamChunkAck{}
	this.StreamIdAlias = uint32(r.Uint32())
	this.AckId = uint32(r.Uint32())
	if r.Intn(5) != 0 {
		v6 := r.Intn(5)
		this.Results = make([]*DownstreamChunkResult, v6)
		for i := 0; i < v6; i++ {
			this.Results[i] = NewPopulatedDownstreamChunkResult(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v7 := r.Intn(10)
		this.UpstreamAliases = make(map[uint32]*UpstreamInfo)
		for i := 0; i < v7; i++ {
			this.UpstreamAliases[uint32(r.Uint32())] = NewPopulatedUpstreamInfo(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		v8 := r.Intn(10)
		this.DataIdAliases = make(map[uint32]*DataID)
		for i := 0; i < v8; i++ {
			this.DataIdAliases[uint32(r.Uint32())] = NewPopulatedDataID(r, easy)
		}
	}
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedDownstreamChunkAckExtensionFields(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDownstream(r, 7)
	}
	return this
}

func NewPopulatedDownstreamChunkAckComplete(r randyDownstream, easy bool) *DownstreamChunkAckComplete {
	this := &DownstreamChunkAckComplete{}
	this.StreamIdAlias = uint32(r.Uint32())
	this.AckId = uint32(r.Uint32())
	this.ResultCode = ResultCode([]int32{0, 0, 1, 2, 3, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 128, 129, 130, 131}[r.Intn(36)])
	this.ResultString = string(randStringDownstream(r))
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedDownstreamChunkAckCompleteExtensionFields(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDownstream(r, 6)
	}
	return this
}

func NewPopulatedDownstreamMetadata(r randyDownstream, easy bool) *DownstreamMetadata {
	this := &DownstreamMetadata{}
	this.RequestId = uint32(r.Uint32())
	oneofNumber_Metadata := []int32{2, 3, 4, 5, 6, 7, 8, 9, 10}[r.Intn(9)]
	switch oneofNumber_Metadata {
	case 2:
		this.Metadata = NewPopulatedDownstreamMetadata_BaseTime(r, easy)
	case 3:
		this.Metadata = NewPopulatedDownstreamMetadata_UpstreamOpen(r, easy)
	case 4:
		this.Metadata = NewPopulatedDownstreamMetadata_UpstreamAbnormalClose(r, easy)
	case 5:
		this.Metadata = NewPopulatedDownstreamMetadata_UpstreamResume(r, easy)
	case 6:
		this.Metadata = NewPopulatedDownstreamMetadata_UpstreamNormalClose(r, easy)
	case 7:
		this.Metadata = NewPopulatedDownstreamMetadata_DownstreamOpen(r, easy)
	case 8:
		this.Metadata = NewPopulatedDownstreamMetadata_DownstreamAbnormalClose(r, easy)
	case 9:
		this.Metadata = NewPopulatedDownstreamMetadata_DownstreamResume(r, easy)
	case 10:
		this.Metadata = NewPopulatedDownstreamMetadata_DownstreamNormalClose(r, easy)
	}
	this.SourceNodeId = string(randStringDownstream(r))
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedDownstreamMetadataExtensionFields(r, easy)
	}
	this.StreamIdAlias = uint32(r.Uint32())
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDownstream(r, 14)
	}
	return this
}

func NewPopulatedDownstreamMetadata_BaseTime(r randyDownstream, easy bool) *DownstreamMetadata_BaseTime {
	this := &DownstreamMetadata_BaseTime{}
	this.BaseTime = NewPopulatedBaseTime(r, easy)
	return this
}
func NewPopulatedDownstreamMetadata_UpstreamOpen(r randyDownstream, easy bool) *DownstreamMetadata_UpstreamOpen {
	this := &DownstreamMetadata_UpstreamOpen{}
	this.UpstreamOpen = NewPopulatedUpstreamOpen(r, easy)
	return this
}
func NewPopulatedDownstreamMetadata_UpstreamAbnormalClose(r randyDownstream, easy bool) *DownstreamMetadata_UpstreamAbnormalClose {
	this := &DownstreamMetadata_UpstreamAbnormalClose{}
	this.UpstreamAbnormalClose = NewPopulatedUpstreamAbnormalClose(r, easy)
	return this
}
func NewPopulatedDownstreamMetadata_UpstreamResume(r randyDownstream, easy bool) *DownstreamMetadata_UpstreamResume {
	this := &DownstreamMetadata_UpstreamResume{}
	this.UpstreamResume = NewPopulatedUpstreamResume(r, easy)
	return this
}
func NewPopulatedDownstreamMetadata_UpstreamNormalClose(r randyDownstream, easy bool) *DownstreamMetadata_UpstreamNormalClose {
	this := &DownstreamMetadata_UpstreamNormalClose{}
	this.UpstreamNormalClose = NewPopulatedUpstreamNormalClose(r, easy)
	return this
}
func NewPopulatedDownstreamMetadata_DownstreamOpen(r randyDownstream, easy bool) *DownstreamMetadata_DownstreamOpen {
	this := &DownstreamMetadata_DownstreamOpen{}
	this.DownstreamOpen = NewPopulatedDownstreamOpen(r, easy)
	return this
}
func NewPopulatedDownstreamMetadata_DownstreamAbnormalClose(r randyDownstream, easy bool) *DownstreamMetadata_DownstreamAbnormalClose {
	this := &DownstreamMetadata_DownstreamAbnormalClose{}
	this.DownstreamAbnormalClose = NewPopulatedDownstreamAbnormalClose(r, easy)
	return this
}
func NewPopulatedDownstreamMetadata_DownstreamResume(r randyDownstream, easy bool) *DownstreamMetadata_DownstreamResume {
	this := &DownstreamMetadata_DownstreamResume{}
	this.DownstreamResume = NewPopulatedDownstreamResume(r, easy)
	return this
}
func NewPopulatedDownstreamMetadata_DownstreamNormalClose(r randyDownstream, easy bool) *DownstreamMetadata_DownstreamNormalClose {
	this := &DownstreamMetadata_DownstreamNormalClose{}
	this.DownstreamNormalClose = NewPopulatedDownstreamNormalClose(r, easy)
	return this
}
func NewPopulatedDownstreamMetadataAck(r randyDownstream, easy bool) *DownstreamMetadataAck {
	this := &DownstreamMetadataAck{}
	this.RequestId = uint32(r.Uint32())
	this.ResultCode = ResultCode([]int32{0, 0, 1, 2, 3, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 128, 129, 130, 131}[r.Intn(36)])
	this.ResultString = string(randStringDownstream(r))
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedDownstreamMetadataAckExtensionFields(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDownstream(r, 5)
	}
	return this
}

func NewPopulatedUpstreamInfo(r randyDownstream, easy bool) *UpstreamInfo {
	this := &UpstreamInfo{}
	this.SessionId = string(randStringDownstream(r))
	v9 := r.Intn(100)
	this.StreamId = make([]byte, v9)
	for i := 0; i < v9; i++ {
		this.StreamId[i] = byte(r.Intn(256))
	}
	this.SourceNodeId = string(randStringDownstream(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDownstream(r, 4)
	}
	return this
}

func NewPopulatedDownstreamChunkResult(r randyDownstream, easy bool) *DownstreamChunkResult {
	this := &DownstreamChunkResult{}
	v10 := r.Intn(100)
	this.StreamIdOfUpstream = make([]byte, v10)
	for i := 0; i < v10; i++ {
		this.StreamIdOfUpstream[i] = byte(r.Intn(256))
	}
	this.SequenceNumberInUpstream = uint32(r.Uint32())
	this.ResultCode = ResultCode([]int32{0, 0, 1, 2, 3, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 128, 129, 130, 131}[r.Intn(36)])
	this.ResultString = string(randStringDownstream(r))
	if r.Intn(5) != 0 {
		this.ExtensionFields = extensions.NewPopulatedDownstreamChunkResultExtensionFields(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedDownstream(r, 6)
	}
	return this
}

type randyDownstream interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneDownstream(r randyDownstream) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringDownstream(r randyDownstream) string {
	v11 := r.Intn(100)
	tmps := make([]rune, v11)
	for i := 0; i < v11; i++ {
		tmps[i] = randUTF8RuneDownstream(r)
	}
	return string(tmps)
}
func randUnrecognizedDownstream(r randyDownstream, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldDownstream(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldDownstream(dAtA []byte, r randyDownstream, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateDownstream(dAtA, uint64(key))
		v12 := r.Int63()
		if r.Intn(2) == 0 {
			v12 *= -1
		}
		dAtA = encodeVarintPopulateDownstream(dAtA, uint64(v12))
	case 1:
		dAtA = encodeVarintPopulateDownstream(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateDownstream(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateDownstream(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateDownstream(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateDownstream(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *DownstreamOpenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovDownstream(uint64(m.RequestId))
	}
	if m.DesiredStreamIdAlias != 0 {
		n += 1 + sovDownstream(uint64(m.DesiredStreamIdAlias))
	}
	if len(m.DownstreamFilters) > 0 {
		for _, e := range m.DownstreamFilters {
			l = e.Size()
			n += 1 + l + sovDownstream(uint64(l))
		}
	}
	if m.ExpiryInterval != 0 {
		n += 1 + sovDownstream(uint64(m.ExpiryInterval))
	}
	if len(m.DataIdAliases) > 0 {
		for k, v := range m.DataIdAliases {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDownstream(uint64(l))
			}
			mapEntrySize := 1 + sovDownstream(uint64(k)) + l
			n += mapEntrySize + 1 + sovDownstream(uint64(mapEntrySize))
		}
	}
	if m.Qos != 0 {
		n += 1 + sovDownstream(uint64(m.Qos))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamOpenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovDownstream(uint64(m.RequestId))
	}
	l = len(m.AssignedStreamId)
	if l > 0 {
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.ServerTime != 0 {
		n += 1 + sozDownstream(uint64(m.ServerTime))
	}
	if m.ResultCode != 0 {
		n += 1 + sovDownstream(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamResumeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovDownstream(uint64(m.RequestId))
	}
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.DesiredStreamIdAlias != 0 {
		n += 1 + sovDownstream(uint64(m.DesiredStreamIdAlias))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamResumeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovDownstream(uint64(m.RequestId))
	}
	if m.ResultCode != 0 {
		n += 1 + sovDownstream(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamCloseRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovDownstream(uint64(m.RequestId))
	}
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamCloseResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovDownstream(uint64(m.RequestId))
	}
	if m.ResultCode != 0 {
		n += 1 + sovDownstream(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamChunk) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamIdAlias != 0 {
		n += 1 + sovDownstream(uint64(m.StreamIdAlias))
	}
	if m.UpstreamOrAlias != nil {
		n += m.UpstreamOrAlias.Size()
	}
	if m.StreamChunk != nil {
		l = m.StreamChunk.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamChunk_UpstreamInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamInfo != nil {
		l = m.UpstreamInfo.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	return n
}
func (m *DownstreamChunk_UpstreamAlias) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += 1 + sovDownstream(uint64(m.UpstreamAlias))
	return n
}
func (m *DownstreamChunkAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamIdAlias != 0 {
		n += 1 + sovDownstream(uint64(m.StreamIdAlias))
	}
	if m.AckId != 0 {
		n += 1 + sovDownstream(uint64(m.AckId))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.Size()
			n += 1 + l + sovDownstream(uint64(l))
		}
	}
	if len(m.UpstreamAliases) > 0 {
		for k, v := range m.UpstreamAliases {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDownstream(uint64(l))
			}
			mapEntrySize := 1 + sovDownstream(uint64(k)) + l
			n += mapEntrySize + 1 + sovDownstream(uint64(mapEntrySize))
		}
	}
	if len(m.DataIdAliases) > 0 {
		for k, v := range m.DataIdAliases {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovDownstream(uint64(l))
			}
			mapEntrySize := 1 + sovDownstream(uint64(k)) + l
			n += mapEntrySize + 1 + sovDownstream(uint64(mapEntrySize))
		}
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamChunkAckComplete) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.StreamIdAlias != 0 {
		n += 1 + sovDownstream(uint64(m.StreamIdAlias))
	}
	if m.AckId != 0 {
		n += 1 + sovDownstream(uint64(m.AckId))
	}
	if m.ResultCode != 0 {
		n += 1 + sovDownstream(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamMetadata) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovDownstream(uint64(m.RequestId))
	}
	if m.Metadata != nil {
		n += m.Metadata.Size()
	}
	l = len(m.SourceNodeId)
	if l > 0 {
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.StreamIdAlias != 0 {
		n += 1 + sovDownstream(uint64(m.StreamIdAlias))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamMetadata_BaseTime) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BaseTime != nil {
		l = m.BaseTime.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	return n
}
func (m *DownstreamMetadata_UpstreamOpen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamOpen != nil {
		l = m.UpstreamOpen.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	return n
}
func (m *DownstreamMetadata_UpstreamAbnormalClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamAbnormalClose != nil {
		l = m.UpstreamAbnormalClose.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	return n
}
func (m *DownstreamMetadata_UpstreamResume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamResume != nil {
		l = m.UpstreamResume.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	return n
}
func (m *DownstreamMetadata_UpstreamNormalClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UpstreamNormalClose != nil {
		l = m.UpstreamNormalClose.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	return n
}
func (m *DownstreamMetadata_DownstreamOpen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamOpen != nil {
		l = m.DownstreamOpen.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	return n
}
func (m *DownstreamMetadata_DownstreamAbnormalClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamAbnormalClose != nil {
		l = m.DownstreamAbnormalClose.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	return n
}
func (m *DownstreamMetadata_DownstreamResume) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamResume != nil {
		l = m.DownstreamResume.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	return n
}
func (m *DownstreamMetadata_DownstreamNormalClose) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DownstreamNormalClose != nil {
		l = m.DownstreamNormalClose.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	return n
}
func (m *DownstreamMetadataAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovDownstream(uint64(m.RequestId))
	}
	if m.ResultCode != 0 {
		n += 1 + sovDownstream(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *UpstreamInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SessionId)
	if l > 0 {
		n += 1 + l + sovDownstream(uint64(l))
	}
	l = len(m.StreamId)
	if l > 0 {
		n += 1 + l + sovDownstream(uint64(l))
	}
	l = len(m.SourceNodeId)
	if l > 0 {
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DownstreamChunkResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StreamIdOfUpstream)
	if l > 0 {
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.SequenceNumberInUpstream != 0 {
		n += 1 + sovDownstream(uint64(m.SequenceNumberInUpstream))
	}
	if m.ResultCode != 0 {
		n += 1 + sovDownstream(uint64(m.ResultCode))
	}
	l = len(m.ResultString)
	if l > 0 {
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.ExtensionFields != nil {
		l = m.ExtensionFields.Size()
		n += 1 + l + sovDownstream(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDownstream(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDownstream(x uint64) (n int) {
	return sovDownstream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DownstreamOpenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamOpenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamOpenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredStreamIdAlias", wireType)
			}
			m.DesiredStreamIdAlias = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DesiredStreamIdAlias |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamFilters", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DownstreamFilters = append(m.DownstreamFilters, &DownstreamFilter{})
			if err := m.DownstreamFilters[len(m.DownstreamFilters)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiryInterval", wireType)
			}
			m.ExpiryInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ExpiryInterval |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataIdAliases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataIdAliases == nil {
				m.DataIdAliases = make(map[uint32]*DataID)
			}
			var mapkey uint32
			var mapvalue *DataID
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDownstream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDownstream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDownstream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDownstream
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDownstream
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DataID{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDownstream(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDownstream
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DataIdAliases[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qos", wireType)
			}
			m.Qos = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Qos |= QoS(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DownstreamOpenRequestExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamOpenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamOpenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamOpenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssignedStreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssignedStreamId = append(m.AssignedStreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.AssignedStreamId == nil {
				m.AssignedStreamId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServerTime", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.ServerTime = int64(v)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DownstreamOpenResponseExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamResumeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamResumeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamResumeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = append(m.StreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamId == nil {
				m.StreamId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DesiredStreamIdAlias", wireType)
			}
			m.DesiredStreamIdAlias = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DesiredStreamIdAlias |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DownstreamResumeRequestExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamResumeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamResumeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamResumeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DownstreamResumeResponseExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamCloseRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamCloseRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamCloseRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = append(m.StreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamId == nil {
				m.StreamId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DownstreamCloseRequestExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamCloseResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamCloseResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamCloseResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DownstreamCloseResponseExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamChunk) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamChunk: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamChunk: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamIdAlias", wireType)
			}
			m.StreamIdAlias = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamIdAlias |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamInfo{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.UpstreamOrAlias = &DownstreamChunk_UpstreamInfo{v}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamAlias", wireType)
			}
			var v uint32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UpstreamOrAlias = &DownstreamChunk_UpstreamAlias{v}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamChunk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.StreamChunk == nil {
				m.StreamChunk = &StreamChunk{}
			}
			if err := m.StreamChunk.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DownstreamChunkExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamChunkAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamChunkAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamChunkAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamIdAlias", wireType)
			}
			m.StreamIdAlias = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamIdAlias |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckId", wireType)
			}
			m.AckId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &DownstreamChunkResult{})
			if err := m.Results[len(m.Results)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamAliases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpstreamAliases == nil {
				m.UpstreamAliases = make(map[uint32]*UpstreamInfo)
			}
			var mapkey uint32
			var mapvalue *UpstreamInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDownstream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDownstream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDownstream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDownstream
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDownstream
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &UpstreamInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDownstream(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDownstream
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.UpstreamAliases[mapkey] = mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataIdAliases", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DataIdAliases == nil {
				m.DataIdAliases = make(map[uint32]*DataID)
			}
			var mapkey uint32
			var mapvalue *DataID
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowDownstream
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDownstream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowDownstream
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthDownstream
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthDownstream
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &DataID{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipDownstream(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthDownstream
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.DataIdAliases[mapkey] = mapvalue
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DownstreamChunkAckExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamChunkAckComplete) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamChunkAckComplete: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamChunkAckComplete: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamIdAlias", wireType)
			}
			m.StreamIdAlias = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamIdAlias |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckId", wireType)
			}
			m.AckId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DownstreamChunkAckCompleteExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamMetadata) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &BaseTime{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &DownstreamMetadata_BaseTime{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamOpen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamOpen{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &DownstreamMetadata_UpstreamOpen{v}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamAbnormalClose", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamAbnormalClose{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &DownstreamMetadata_UpstreamAbnormalClose{v}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamResume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamResume{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &DownstreamMetadata_UpstreamResume{v}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpstreamNormalClose", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &UpstreamNormalClose{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &DownstreamMetadata_UpstreamNormalClose{v}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamOpen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamOpen{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &DownstreamMetadata_DownstreamOpen{v}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamAbnormalClose", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamAbnormalClose{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &DownstreamMetadata_DownstreamAbnormalClose{v}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamResume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamResume{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &DownstreamMetadata_DownstreamResume{v}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DownstreamNormalClose", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &DownstreamNormalClose{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Metadata = &DownstreamMetadata_DownstreamNormalClose{v}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DownstreamMetadataExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamIdAlias", wireType)
			}
			m.StreamIdAlias = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StreamIdAlias |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipDownstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamMetadataAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamMetadataAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamMetadataAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DownstreamMetadataAckExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpstreamInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpstreamInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpstreamInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamId = append(m.StreamId[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamId == nil {
				m.StreamId = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceNodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceNodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DownstreamChunkResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDownstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DownstreamChunkResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DownstreamChunkResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreamIdOfUpstream", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreamIdOfUpstream = append(m.StreamIdOfUpstream[:0], dAtA[iNdEx:postIndex]...)
			if m.StreamIdOfUpstream == nil {
				m.StreamIdOfUpstream = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumberInUpstream", wireType)
			}
			m.SequenceNumberInUpstream = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumberInUpstream |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultCode", wireType)
			}
			m.ResultCode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultCode |= ResultCode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ResultString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExtensionFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDownstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDownstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ExtensionFields == nil {
				m.ExtensionFields = &extensions.DownstreamChunkResultExtensionFields{}
			}
			if err := m.ExtensionFields.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDownstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDownstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDownstream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDownstream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDownstream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDownstream
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDownstream
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDownstream
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDownstream        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDownstream          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDownstream = fmt.Errorf("proto: unexpected end of group")
)
