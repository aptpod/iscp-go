// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: extensions/ping_pong.proto

package iscp2

import (
	bytes "bytes"
	io "io"
	math "math"
	math_bits "math/bits"

	"github.com/aptpod/iscp-go/errors"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = errors.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PingExtensionFields struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingExtensionFields) Reset()         { *m = PingExtensionFields{} }
func (m *PingExtensionFields) String() string { return proto.CompactTextString(m) }
func (*PingExtensionFields) ProtoMessage()    {}
func (*PingExtensionFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_784dbd116ab29f6e, []int{0}
}
func (m *PingExtensionFields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PingExtensionFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PingExtensionFields.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PingExtensionFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingExtensionFields.Merge(m, src)
}
func (m *PingExtensionFields) XXX_Size() int {
	return m.Size()
}
func (m *PingExtensionFields) XXX_DiscardUnknown() {
	xxx_messageInfo_PingExtensionFields.DiscardUnknown(m)
}

var xxx_messageInfo_PingExtensionFields proto.InternalMessageInfo

type PongExtensionFields struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PongExtensionFields) Reset()         { *m = PongExtensionFields{} }
func (m *PongExtensionFields) String() string { return proto.CompactTextString(m) }
func (*PongExtensionFields) ProtoMessage()    {}
func (*PongExtensionFields) Descriptor() ([]byte, []int) {
	return fileDescriptor_784dbd116ab29f6e, []int{1}
}
func (m *PongExtensionFields) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PongExtensionFields) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PongExtensionFields.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PongExtensionFields) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PongExtensionFields.Merge(m, src)
}
func (m *PongExtensionFields) XXX_Size() int {
	return m.Size()
}
func (m *PongExtensionFields) XXX_DiscardUnknown() {
	xxx_messageInfo_PongExtensionFields.DiscardUnknown(m)
}

var xxx_messageInfo_PongExtensionFields proto.InternalMessageInfo

func init() {
	proto.RegisterType((*PingExtensionFields)(nil), "iscp2.PingExtensionFields")
	proto.RegisterType((*PongExtensionFields)(nil), "iscp2.PongExtensionFields")
}

func init() { proto.RegisterFile("extensions/ping_pong.proto", fileDescriptor_784dbd116ab29f6e) }

var fileDescriptor_784dbd116ab29f6e = []byte{
	// 152 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0xad, 0x28, 0x49,
	0xcd, 0x2b, 0xce, 0xcc, 0xcf, 0x2b, 0xd6, 0x2f, 0xc8, 0xcc, 0x4b, 0x8f, 0x2f, 0xc8, 0xcf, 0x4b,
	0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xcd, 0x2c, 0x4e, 0x2e, 0x30, 0x92, 0xd2, 0x4d,
	0xcf, 0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xcf, 0x4f, 0xcf, 0xd7, 0x07,
	0xcb, 0x26, 0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0xd1, 0xa5, 0x24, 0xca, 0x25, 0x1c,
	0x90, 0x99, 0x97, 0xee, 0x0a, 0x33, 0xd7, 0x2d, 0x33, 0x35, 0x27, 0xa5, 0x18, 0x2c, 0x9c, 0x8f,
	0x21, 0xec, 0xa4, 0x70, 0xe2, 0xa1, 0x1c, 0xc3, 0x8f, 0x87, 0x72, 0x8c, 0x2b, 0x1e, 0xc9, 0x31,
	0xee, 0x78, 0x24, 0xc7, 0x78, 0xe0, 0x91, 0x1c, 0xe3, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9,
	0x31, 0x3e, 0x78, 0x24, 0xc7, 0x98, 0xc4, 0x06, 0x36, 0xd6, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff,
	0x9c, 0x5a, 0x8e, 0x43, 0xaa, 0x00, 0x00, 0x00,
}

func (this *PingExtensionFields) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PingExtensionFields)
	if !ok {
		that2, ok := that.(PingExtensionFields)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (this *PongExtensionFields) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PongExtensionFields)
	if !ok {
		that2, ok := that.(PongExtensionFields)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}
func (m *PingExtensionFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PingExtensionFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PingExtensionFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *PongExtensionFields) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PongExtensionFields) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PongExtensionFields) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func encodeVarintPingPong(dAtA []byte, offset int, v uint64) int {
	offset -= sovPingPong(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedPingExtensionFields(r randyPingPong, easy bool) *PingExtensionFields {
	this := &PingExtensionFields{}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPingPong(r, 1)
	}
	return this
}

func NewPopulatedPongExtensionFields(r randyPingPong, easy bool) *PongExtensionFields {
	this := &PongExtensionFields{}
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedPingPong(r, 1)
	}
	return this
}

type randyPingPong interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RunePingPong(r randyPingPong) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringPingPong(r randyPingPong) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RunePingPong(r)
	}
	return string(tmps)
}
func randUnrecognizedPingPong(r randyPingPong, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldPingPong(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldPingPong(dAtA []byte, r randyPingPong, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulatePingPong(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulatePingPong(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulatePingPong(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulatePingPong(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulatePingPong(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulatePingPong(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulatePingPong(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *PingExtensionFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PongExtensionFields) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPingPong(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPingPong(x uint64) (n int) {
	return sovPingPong(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PingExtensionFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPingPong
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return errors.Errorf("proto: PingExtensionFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return errors.Errorf("proto: PingExtensionFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPingPong(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPingPong
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PongExtensionFields) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPingPong
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return errors.Errorf("proto: PongExtensionFields: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return errors.Errorf("proto: PongExtensionFields: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPingPong(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPingPong
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPingPong(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPingPong
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPingPong
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPingPong
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPingPong
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPingPong
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, errors.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPingPong
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPingPong        = errors.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPingPong          = errors.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPingPong = errors.Errorf("proto: unexpected end of group")
)
