// Code generated by MockGen. DO NOT EDIT.
// Source: ./main.go

// Package encodingmock is a generated GoMock package.
package encodingmock

import (
	io "io"
	reflect "reflect"

	encoding "github.com/aptpod/iscp-go/encoding"
	message "github.com/aptpod/iscp-go/message"
	gomock "github.com/golang/mock/gomock"
)

// MockEncoding is a mock of Encoding interface.
type MockEncoding struct {
	ctrl     *gomock.Controller
	recorder *MockEncodingMockRecorder
}

// MockEncodingMockRecorder is the mock recorder for MockEncoding.
type MockEncodingMockRecorder struct {
	mock *MockEncoding
}

// NewMockEncoding creates a new mock instance.
func NewMockEncoding(ctrl *gomock.Controller) *MockEncoding {
	mock := &MockEncoding{ctrl: ctrl}
	mock.recorder = &MockEncodingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncoding) EXPECT() *MockEncodingMockRecorder {
	return m.recorder
}

// ContentType mocks base method.
func (m *MockEncoding) ContentType() encoding.ContentType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContentType")
	ret0, _ := ret[0].(encoding.ContentType)
	return ret0
}

// ContentType indicates an expected call of ContentType.
func (mr *MockEncodingMockRecorder) ContentType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContentType", reflect.TypeOf((*MockEncoding)(nil).ContentType))
}

// DecodeFrom mocks base method.
func (m *MockEncoding) DecodeFrom(arg0 io.Reader) (int, message.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeFrom", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(message.Message)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// DecodeFrom indicates an expected call of DecodeFrom.
func (mr *MockEncodingMockRecorder) DecodeFrom(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeFrom", reflect.TypeOf((*MockEncoding)(nil).DecodeFrom), arg0)
}

// EncodeTo mocks base method.
func (m *MockEncoding) EncodeTo(arg0 io.Writer, arg1 message.Message) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeTo", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeTo indicates an expected call of EncodeTo.
func (mr *MockEncodingMockRecorder) EncodeTo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeTo", reflect.TypeOf((*MockEncoding)(nil).EncodeTo), arg0, arg1)
}
